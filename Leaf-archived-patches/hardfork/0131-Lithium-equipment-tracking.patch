From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: HaHaWTH <102713261+HaHaWTH@users.noreply.github.com>
Date: Tue, 9 Nov 2077 00:00:00 +0800
Subject: [PATCH] Lithium: equipment tracking

Should have special treatment to ArmorStand, since Paper introduced the configurable
ArmorStand no-tick, and still gives it ability to update equipment changes.
Thus added a bypass condition in LivingEntity#collectEquipmentChanges, always send
ArmorStand equipment changes even if the ArmorStand is no-tick

This patch is based on the following mixins:
* "net/caffeinemc/mods/lithium/mixin/util/item_component_and_count_tracking/PatchedDataComponentMapMixin.java"
* "net/caffeinemc/mods/lithium/mixin/util/item_component_and_count_tracking/ItemStackMixin.java"
* "net/caffeinemc/mods/lithium/mixin/entity/equipment_tracking/equipment_changes/LivingEntityMixin.java"
* "net/caffeinemc/mods/lithium/mixin/entity/equipment_tracking/ArmorStandMixin.java"
* "net/caffeinemc/mods/lithium/mixin/entity/equipment_tracking/LivingEntityMixin.java"
* "net/caffeinemc/mods/lithium/mixin/entity/equipment_tracking/MobMixin.java"
* "net/caffeinemc/mods/lithium/mixin/entity/equipment_tracking/enchantment_ticking/LivingEntityMixin.java"
* "net/caffeinemc/mods/lithium/common/entity/EquipmentEntity.java"
* "net/caffeinemc/mods/lithium/common/util/change_tracking/ChangePublisher.java"
* "net/caffeinemc/mods/lithium/common/util/change_tracking/ChangeSubscriber.java"
By: 2No2Name <2No2Name@web.de>
As part of: Lithium (https://github.com/CaffeineMC/lithium-fabric)
Licensed under: LGPL-3.0 (https://www.gnu.org/licenses/lgpl-3.0.html)

diff --git a/net/minecraft/core/component/PatchedDataComponentMap.java b/net/minecraft/core/component/PatchedDataComponentMap.java
index ceee6345530c3bf91cce988af2da12f0798d8f4b..1289fecee1f05abfce09672ec406caf759943b5c 100644
--- a/net/minecraft/core/component/PatchedDataComponentMap.java
+++ b/net/minecraft/core/component/PatchedDataComponentMap.java
@@ -14,10 +14,11 @@ import java.util.Map.Entry;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 
-public final class PatchedDataComponentMap implements DataComponentMap {
+public final class PatchedDataComponentMap implements DataComponentMap, net.caffeinemc.mods.lithium.common.util.change_tracking.ChangePublisher<PatchedDataComponentMap> { // Leaf - Lithium equipment tracking
     private final DataComponentMap prototype;
     private Reference2ObjectMap<DataComponentType<?>, Optional<?>> patch;
     private boolean copyOnWrite;
+    private net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber<PatchedDataComponentMap> subscriber; // Leaf - Lithium equipment tracking
 
     public PatchedDataComponentMap(DataComponentMap baseComponents) {
         this(baseComponents, Reference2ObjectMaps.emptyMap(), true);
@@ -133,6 +134,9 @@ public final class PatchedDataComponentMap implements DataComponentMap {
     }
 
     private void ensureMapOwnership() {
+        if (this.subscriber != null) {
+            this.subscriber.notify(this, 0);
+        }
         if (this.copyOnWrite) {
             this.patch = new Reference2ObjectArrayMap<>(this.patch);
             this.copyOnWrite = false;
@@ -215,6 +219,22 @@ public final class PatchedDataComponentMap implements DataComponentMap {
         return new PatchedDataComponentMap(this.prototype, this.patch, true);
     }
 
+    // Leaf start - Lithium equipment tracking
+    @Override
+    public void subscribe(net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber<PatchedDataComponentMap> subscriber, int subscriberData) {
+        if (subscriberData != 0) {
+            throw new UnsupportedOperationException("ComponentMapImpl does not support subscriber data");
+        }
+        this.subscriber = net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.combine(this.subscriber, 0, subscriber, 0);
+    }
+
+    @Override
+    public int unsubscribe(net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber<PatchedDataComponentMap> subscriber) {
+        this.subscriber = net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.without(this.subscriber, subscriber);
+        return 0;
+    }
+    // Leaf end - Lithium equipment tracking
+
     @Override
     public boolean equals(Object object) {
         if (this == object) {
diff --git a/net/minecraft/world/entity/LivingEntity.java b/net/minecraft/world/entity/LivingEntity.java
index 2b8cc1cfeda50721c063429a7d31623dc93089ea..ac19c28135debebf0e1055d47571dc068f10e30e 100644
--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -160,7 +160,7 @@ import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
 // CraftBukkit end
 
-public abstract class LivingEntity extends Entity implements Attackable {
+public abstract class LivingEntity extends Entity implements Attackable, net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.CountChangeSubscriber<ItemStack>, net.caffeinemc.mods.lithium.common.entity.EquipmentEntity, net.caffeinemc.mods.lithium.common.entity.EquipmentEntity.TickableEnchantmentTrackingEntity, net.caffeinemc.mods.lithium.common.entity.EquipmentEntity.EquipmentTrackingEntity { // Leaf - Lithium equipment tracking
 
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final String TAG_ACTIVE_EFFECTS = "active_effects";
@@ -301,6 +301,10 @@ public abstract class LivingEntity extends Entity implements Attackable {
     public net.kyori.adventure.util.TriState frictionState = net.kyori.adventure.util.TriState.NOT_SET; // Paper - Friction API
     protected boolean shouldBurnInDay = false; public boolean shouldBurnInDay() { return this.shouldBurnInDay; } public void setShouldBurnInDay(boolean shouldBurnInDay) { this.shouldBurnInDay = shouldBurnInDay; } // Purpur - API for any mob to burn daylight
 
+    // Leaf start - Lithium equipment tracking
+    private boolean maybeHasTickableEnchantments = this instanceof net.minecraft.world.entity.player.Player;
+    private boolean equipmentChanged = true;
+    // Leaf end - Lithium equipment tracking
     @Override
     public float getBukkitYaw() {
         return this.getYHeadRot();
@@ -454,7 +458,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
 
         Level world = this.level();
 
-        if (world instanceof ServerLevel worldserver) {
+        if (this.maybeHasTickableEnchantments && world instanceof ServerLevel worldserver) { // Leaf - Lithium equipment tracking
             EnchantmentHelper.tickEffects(worldserver, this);
         }
 
@@ -751,6 +755,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
             boolean flag = itemstack1.isEmpty() && itemstack.isEmpty();
 
             if (!flag && !ItemStack.isSameItemSameComponents(itemstack, itemstack1) && !this.firstTick) {
+                this.onEquipmentReplaced(itemstack, itemstack1); // Leaf - Lithium equipment tracking
                 Equippable equippable = (Equippable) itemstack1.get(DataComponents.EQUIPPABLE);
 
                 if (!this.isSilent() && equippable != null && enumitemslot == equippable.slot() && !silent) { // CraftBukkit
@@ -3517,6 +3522,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         Map<EquipmentSlot, ItemStack> map = this.collectEquipmentChanges();
 
         if (map != null) {
+            if (!(this instanceof net.minecraft.world.entity.player.Player)) this.equipmentChanged = false; // Leaf - Lithium equipment tracking
             this.handleHandSwap(map);
             if (!map.isEmpty()) {
                 this.handleEquipmentChanges(map);
@@ -3527,6 +3533,10 @@ public abstract class LivingEntity extends Entity implements Attackable {
 
     @Nullable
     private Map<EquipmentSlot, ItemStack> collectEquipmentChanges() {
+        // Leaf start - Lithium equipment tracking
+        final boolean isArmorStandUpdateNoTick = this instanceof net.minecraft.world.entity.decoration.ArmorStand stand && !stand.canTick && stand.noTickEquipmentDirty;
+        if (!isArmorStandUpdateNoTick && !this.equipmentChanged) return null;
+        // Leaf end - Lithium equipment tracking
         Map<EquipmentSlot, ItemStack> map = null;
         Iterator iterator = EquipmentSlot.VALUES.iterator();
 
@@ -4985,6 +4995,79 @@ public abstract class LivingEntity extends Entity implements Attackable {
     public int getLastHurtByPlayerTime() {
         return this.lastHurtByPlayerTime;
     }
+    // Leaf start - Lithium entity equipment tracking
+    @Override
+    public void updateHasTickableEnchantments(ItemStack oldStack, ItemStack newStack) {
+        if (!this.maybeHasTickableEnchantments) {
+            this.maybeHasTickableEnchantments = stackHasTickableEnchantment(newStack);
+        }
+    }
+
+    @Override
+    public void notifyAfterEnchantmentChange(ItemStack publisher, int subscriberData) {
+        if (!this.maybeHasTickableEnchantments) {
+            this.maybeHasTickableEnchantments = stackHasTickableEnchantment(publisher);
+        }
+    }
+
+    @Override
+    public void onEquipmentChanged() {
+        this.equipmentChanged = true;
+    }
+
+    private static boolean stackHasTickableEnchantment(ItemStack stack) {
+        if (!stack.isEmpty()) {
+            net.minecraft.world.item.enchantment.ItemEnchantments enchantments = stack.get(DataComponents.ENCHANTMENTS);
+            if (enchantments != null && !enchantments.isEmpty()) {
+                for (Holder<Enchantment> enchantmentEntry : enchantments.keySet()) {
+                    if (!enchantmentEntry.value().getEffects(net.minecraft.world.item.enchantment.EnchantmentEffectComponents.TICK).isEmpty()) {
+                        return true;
+                    }
+                }
+                return false;
+            }
+        }
+        return false;
+    }
+    @Override
+    public void notify(@Nullable ItemStack publisher, int zero) {
+        if (this instanceof EquipmentTrackingEntity equipmentTrackingEntity) {
+            equipmentTrackingEntity.onEquipmentChanged();
+        }
+    }
+
+    @Override
+    public void notifyCount(ItemStack publisher, int zero, int newCount) {
+        if (newCount == 0) {
+            publisher.unsubscribeWithData(this, zero);
+        }
+
+        this.onEquipmentReplaced(publisher, ItemStack.EMPTY);
+    }
+
+    @Override
+    public void forceUnsubscribe(ItemStack publisher, int zero) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void onEquipmentReplaced(ItemStack oldStack, ItemStack newStack) {
+        if (this instanceof TickableEnchantmentTrackingEntity enchantmentTrackingEntity) {
+            enchantmentTrackingEntity.updateHasTickableEnchantments(oldStack, newStack);
+        }
+
+        if (this instanceof EquipmentTrackingEntity equipmentTrackingEntity) {
+            equipmentTrackingEntity.onEquipmentChanged();
+        }
+
+        if (!oldStack.isEmpty()) {
+            oldStack.unsubscribeWithData(this, 0);
+        }
+        if (!newStack.isEmpty()) {
+            newStack.subscribe(this, 0);
+        }
+    }
+    // Leaf end - Lithium entity equipment tracking
 
     public static record Fallsounds(SoundEvent small, SoundEvent big) {
 
diff --git a/net/minecraft/world/entity/Mob.java b/net/minecraft/world/entity/Mob.java
index 1e4729be4a245a811fd15ea1c02179b37defd67c..5814d9b6b0fc5346c24dd268ec147a67c5acbfdb 100644
--- a/net/minecraft/world/entity/Mob.java
+++ b/net/minecraft/world/entity/Mob.java
@@ -98,7 +98,7 @@ import org.bukkit.event.entity.EntityUnleashEvent;
 import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
 // CraftBukkit end
 
-public abstract class Mob extends LivingEntity implements EquipmentUser, Leashable, Targeting {
+public abstract class Mob extends LivingEntity implements EquipmentUser, Leashable, Targeting, net.caffeinemc.mods.lithium.common.entity.EquipmentEntity { // Leaf - Lithium equipment tracking
 
     private static final EntityDataAccessor<Byte> DATA_MOB_FLAGS_ID = SynchedEntityData.defineId(Mob.class, EntityDataSerializers.BYTE);
     private static final int MOB_FLAG_NO_AI = 1;
@@ -577,6 +577,7 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
 
     @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
+        ItemStack prevBodyArmor = this.bodyArmorItem; // Leaf - Lithium equipment tracking
         super.readAdditionalSaveData(nbt);
 
         // CraftBukkit start - If looting or persistence is false only use it if it was set after we started using it
@@ -601,7 +602,11 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
 
             for (i = 0; i < this.armorItems.size(); ++i) {
                 nbttagcompound1 = nbttaglist.getCompound(i);
-                this.armorItems.set(i, ItemStack.parseOptional(this.registryAccess(), nbttagcompound1));
+                // Leaf start - Lithium equipment tracking
+                ItemStack currStack = ItemStack.parseOptional(this.registryAccess(), nbttagcompound1);
+                ItemStack prevStack = this.armorItems.set(i, currStack);
+                this.trackEquipChange(prevStack, currStack);
+                // Leaf end - Lithium equipment tracking
             }
         }
 
@@ -618,7 +623,11 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
 
             for (i = 0; i < this.handItems.size(); ++i) {
                 nbttagcompound1 = nbttaglist.getCompound(i);
-                this.handItems.set(i, ItemStack.parseOptional(this.registryAccess(), nbttagcompound1));
+                // Leaf start - Lithium equipment tracking
+                ItemStack currStack = ItemStack.parseOptional(this.registryAccess(), nbttagcompound1);
+                ItemStack prevStack = this.handItems.set(i, currStack);
+                this.trackEquipChange(prevStack, currStack);
+                // Leaf end - Lithium equipment tracking
             }
         }
 
@@ -655,6 +664,11 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
             this.ticksSinceLastInteraction = nbt.getInt("Purpur.ticksSinceLastInteraction");
         }
         // Purpur end
+        // Leaf start - Lithium equipment tracking
+        if (prevBodyArmor != this.bodyArmorItem) {
+            this.trackEquipChange(prevBodyArmor, this.bodyArmorItem);
+        }
+        // Leaf end - Lithium equipment tracking
     }
 
     @Override
@@ -1870,4 +1884,10 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         }
     }
     // Purpur end
+
+    // Leaf start - Lithium equipment tracking
+    private void trackEquipChange(ItemStack prevStack, ItemStack currStack) {
+        this.onEquipmentReplaced(prevStack, currStack);
+    }
+    // Leaf end - Lithium equipment tracking
 }
diff --git a/net/minecraft/world/entity/decoration/ArmorStand.java b/net/minecraft/world/entity/decoration/ArmorStand.java
index a3c284976b37e865c51ee91166c4046a3c4f3a16..b34522a57cf3ee5679481ead61ae52ac9a28f6f9 100644
--- a/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -54,7 +54,7 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerArmorStandManipulateEvent;
 // CraftBukkit end
 
-public class ArmorStand extends LivingEntity {
+public class ArmorStand extends LivingEntity implements net.caffeinemc.mods.lithium.common.entity.EquipmentEntity { // Leaf - Lithium equipment tracking
 
     public static final int WOBBLE_TIME = 5;
     private static final boolean ENABLE_ARMS = true;
@@ -112,7 +112,7 @@ public class ArmorStand extends LivingEntity {
     public boolean canTick = true;
     public boolean canTickSetByAPI = false;
     private boolean noTickPoseDirty = false;
-    private boolean noTickEquipmentDirty = false;
+    public boolean noTickEquipmentDirty = false; // Leaf - Lithium equipment tracking - private -> public
     // Paper end - Allow ArmorStands not to tick
     public boolean canMovementTick = true; // Purpur
 
@@ -274,7 +274,11 @@ public class ArmorStand extends LivingEntity {
 
             for (i = 0; i < this.armorItems.size(); ++i) {
                 nbttagcompound1 = nbttaglist.getCompound(i);
-                this.armorItems.set(i, ItemStack.parseOptional(this.registryAccess(), nbttagcompound1));
+                // Leaf start - Lithium equipment tracking
+                ItemStack currElement = ItemStack.parseOptional(this.registryAccess(), nbttagcompound1);
+                ItemStack prevElement = this.armorItems.set(i, currElement);
+                this.trackEquipChange(prevElement, currElement);
+                // Leaf end - Lithium equipment tracking
             }
         }
 
@@ -283,7 +287,11 @@ public class ArmorStand extends LivingEntity {
 
             for (i = 0; i < this.handItems.size(); ++i) {
                 nbttagcompound1 = nbttaglist.getCompound(i);
-                this.handItems.set(i, ItemStack.parseOptional(this.registryAccess(), nbttagcompound1));
+                // Leaf start - Lithium equipment tracking
+                ItemStack currStack = ItemStack.parseOptional(this.registryAccess(), nbttagcompound1);
+                ItemStack prevStack = this.handItems.set(i, currStack);
+                this.trackEquipChange(prevStack, currStack);
+                // Leaf end - Lithium equipment tracking
             }
         }
 
@@ -638,7 +646,11 @@ public class ArmorStand extends LivingEntity {
             itemstack = (ItemStack) this.handItems.get(i);
             if (!itemstack.isEmpty()) {
                 this.drops.add(new DefaultDrop(itemstack, stack -> Block.popResource(this.level(), this.blockPosition().above(), stack))); // CraftBukkit - add to drops // Paper - Restore vanilla drops behavior; mirror so we can destroy it later - though this call site was safe & spawn drops correctly
-                this.handItems.set(i, ItemStack.EMPTY);
+                // Leaf start - Lithium equipment tracking
+                ItemStack emptyStack = ItemStack.EMPTY;
+                ItemStack prevStack = this.handItems.set(i, emptyStack);
+                this.trackEquipChange(prevStack, emptyStack);
+                // Leaf end - Lithium equipment tracking
             }
         }
 
@@ -646,7 +658,11 @@ public class ArmorStand extends LivingEntity {
             itemstack = (ItemStack) this.armorItems.get(i);
             if (!itemstack.isEmpty()) {
                 this.drops.add(new DefaultDrop(itemstack, stack -> Block.popResource(this.level(), this.blockPosition().above(), stack))); // CraftBukkit - add to drops // Paper - Restore vanilla drops behavior; mirror so we can destroy it later - though this call site was safe & spawn drops correctly
-                this.armorItems.set(i, ItemStack.EMPTY);
+                // Leaf start - Lithium equipment tracking
+                ItemStack emptyStack = ItemStack.EMPTY;
+                ItemStack prevStack = this.armorItems.set(i, ItemStack.EMPTY);
+                this.trackEquipChange(prevStack, emptyStack);
+                // Leaf end - Lithium equipment tracking
             }
         }
         return this.dropAllDeathLoot(world, damageSource); // CraftBukkit - moved from above // Paper
@@ -693,10 +709,12 @@ public class ArmorStand extends LivingEntity {
                 this.updatePose();
             }
 
+            // Leaf start - Lithium equipment tracking
             if (this.noTickEquipmentDirty) {
-                this.noTickEquipmentDirty = false;
                 this.detectEquipmentUpdatesPublic();
+                this.noTickEquipmentDirty = false;
             }
+            // Leaf end - Lithium equipment tracking
 
             return;
         }
@@ -1032,4 +1050,10 @@ public class ArmorStand extends LivingEntity {
         if (this.canMovementTick && this.canMove) super.aiStep();
     }
     // Purpur end
+
+    // Leaf start - Lithium equipment tracking
+    private void trackEquipChange(ItemStack prevStack, ItemStack currStack) {
+        this.onEquipmentReplaced(prevStack, currStack);
+    }
+    // Leaf end - Lithium equipment tracking
 }
diff --git a/net/minecraft/world/item/ItemStack.java b/net/minecraft/world/item/ItemStack.java
index 1029499ce8fb236a23beb9dae168b82039734e59..4a5d6767bf4ead62f3c533fa33f7ce98637cce31 100644
--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -125,7 +125,7 @@ import org.bukkit.event.player.PlayerItemDamageEvent;
 import org.bukkit.event.world.StructureGrowEvent;
 // CraftBukkit end
 
-public final class ItemStack implements DataComponentHolder {
+public final class ItemStack implements DataComponentHolder, net.caffeinemc.mods.lithium.common.util.change_tracking.ChangePublisher<ItemStack>, net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber<PatchedDataComponentMap> { // Leaf - Lithium equipment tracking
 
     public static final Codec<ItemStack> CODEC = Codec.lazyInitialized(() -> {
         return RecordCodecBuilder.<ItemStack>create((instance) -> { // CraftBukkit - decompile error
@@ -227,6 +227,11 @@ public final class ItemStack implements DataComponentHolder {
     private PatchedDataComponentMap components;
     @Nullable
     private Entity entityRepresentation;
+    // Leaf start - Lithium equipment tracking
+    @Nullable
+    private net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber<ItemStack> subscriber;
+    private int subscriberData;
+    // Leaf end - Lithium equipment tracking
 
     private static DataResult<ItemStack> validateStrict(ItemStack stack) {
         DataResult<Unit> dataresult = ItemStack.validateComponents(stack.getComponents());
@@ -1454,6 +1459,21 @@ public final class ItemStack implements DataComponentHolder {
     }
 
     public void setCount(int count) {
+        // Leaf start - Lithium equipment tracking
+        if (count != this.count) {
+            if (this.subscriber instanceof net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.CountChangeSubscriber<ItemStack> countChangeSubscriber) {
+                countChangeSubscriber.notifyCount(this, this.subscriberData, count);
+            }
+            if (count == 0) {
+                this.components.unsubscribe(this);
+                if (this.subscriber != null) {
+                    this.subscriber.forceUnsubscribe(this, this.subscriberData);
+                    this.subscriber = null;
+                    this.subscriberData = 0;
+                }
+            }
+        }
+        // Leaf end - Lithium equipment tracking
         this.count = count;
     }
 
@@ -1515,4 +1535,87 @@ public final class ItemStack implements DataComponentHolder {
 
         return repairable != null && repairable.isValidRepairItem(ingredient);
     }
+    
+    // Leaf start - Lithium equipment tracking
+    @Override
+    public void subscribe(net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber<ItemStack> subscriber, int subscriberData) {
+        if (this.isEmpty()) {
+            throw new IllegalStateException("Cannot subscribe to an empty ItemStack!");
+        }
+
+        if (this.subscriber == null) {
+            this.startTrackingChanges();
+        }
+        this.subscriber = net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.combine(this.subscriber, this.subscriberData, subscriber, subscriberData);
+        if (this.subscriber instanceof net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.Multi<?>) {
+            this.subscriberData = 0;
+        } else {
+            this.subscriberData = subscriberData;
+        }
+    }
+
+    @Override
+    public int unsubscribe(net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber<ItemStack> subscriber) {
+        if (this.isEmpty()) {
+            throw new IllegalStateException("Cannot unsubscribe from an empty ItemStack!");
+        }
+
+        int retval = net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.dataOf(this.subscriber, subscriber, this.subscriberData);
+        this.subscriberData = net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.dataWithout(this.subscriber, subscriber, this.subscriberData);
+        this.subscriber = net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.without(this.subscriber, subscriber);
+
+        if (this.subscriber == null) {
+            this.components.unsubscribe(this);
+        }
+        return retval;
+    }
+
+    @Override
+    public void unsubscribeWithData(net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber<ItemStack> subscriber, int subscriberData) {
+        if (this.isEmpty()) {
+            throw new IllegalStateException("Cannot unsubscribe from an empty ItemStack!");
+        }
+
+        this.subscriberData = net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.dataWithout(this.subscriber, subscriber, this.subscriberData, subscriberData, true);
+        this.subscriber = net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.without(this.subscriber, subscriber, subscriberData, true);
+
+        if (this.subscriber == null) {
+            this.components.unsubscribe(this);
+        }
+    }
+
+    @Override
+    public boolean isSubscribedWithData(net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber<ItemStack> subscriber, int subscriberData) {
+        if (this.isEmpty()) {
+            throw new IllegalStateException("Cannot be subscribed to an empty ItemStack!");
+        }
+
+        return net.caffeinemc.mods.lithium.common.util.change_tracking.ChangeSubscriber.containsSubscriber(this.subscriber, this.subscriberData, subscriber, subscriberData);
+    }
+
+    @Override
+    public void forceUnsubscribe(PatchedDataComponentMap publisher, int subscriberData) {
+        if (publisher != this.components) {
+            throw new IllegalStateException("Invalid publisher, expected " + this.components + " but got " + publisher);
+        }
+        this.subscriber.forceUnsubscribe(this, this.subscriberData);
+        this.subscriber = null;
+        this.subscriberData = 0;
+    }
+
+    @Override
+    public void notify(PatchedDataComponentMap publisher, int subscriberData) {
+        if (publisher != this.components) {
+            throw new IllegalStateException("Invalid publisher, expected " + this.components + " but got " + publisher);
+        }
+
+        if (this.subscriber != null) {
+            this.subscriber.notify(this, this.subscriberData);
+        }
+    }
+
+    private void startTrackingChanges() {
+        this.components.subscribe(this, 0);
+    }
+    // Leaf end - Lithium equipment tracking
 }
