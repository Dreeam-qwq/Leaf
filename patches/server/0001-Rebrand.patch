From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Encode42 <me@encode42.dev>
Date: Thu, 16 Sep 2021 20:39:45 -0400
Subject: [PATCH] Rebrand


diff --git a/build.gradle.kts b/build.gradle.kts
index f11cae89edeb929c37de00a0f237711f33914301..da04cc9e5ef6bff8bfb424a4bdc422b30f85eb98 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -9,7 +9,7 @@ plugins {
 }
 
 dependencies {
-    implementation(project(":Prismarine-API")) // Paper // Pufferfish // Purpur // Prismarine
+    implementation(project(":leaf-api")) // Paper // Pufferfish // Purpur // Prismarine // Leaf
     // Pufferfish start
     implementation("io.papermc.paper:paper-mojangapi:1.19.2-R0.1-SNAPSHOT") {
         exclude("io.papermc.paper", "paper-api")
@@ -87,7 +87,7 @@ tasks.jar {
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
             "Implementation-Title" to "CraftBukkit",
-            "Implementation-Version" to "git-Prismarine-$implementationVersion", // Pufferfish // Purpur // Prismarine
+            "Implementation-Version" to "git-Leaf-$implementationVersion", // Pufferfish // Purpur // Prismarine // Leaf
             "Implementation-Vendor" to date, // Paper
             "Specification-Title" to "Bukkit",
             "Specification-Version" to project.version,
diff --git a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
index 22e477b36ad0886f8f2733076b3099f060c90310..0e47ec6ee9017a6a68614686a148c4733a124ecf 100644
--- a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
+++ b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
@@ -17,7 +17,7 @@ public final class PaperConsole extends SimpleTerminalConsole {
     @Override
     protected LineReader buildReader(LineReaderBuilder builder) {
         builder
-                .appName("Prismarine") // Purpur // Prismarine
+                .appName("Leaf") // Purpur // Prismarine // Leaf
                 .variable(LineReader.HISTORY_FILE, java.nio.file.Paths.get(".console_history"))
                 .completer(new ConsoleCommandCompleter(this.server))
                 .option(LineReader.Option.COMPLETE_IN_WORD, true);
diff --git a/src/main/java/net/minecraft/CrashReport.java b/src/main/java/net/minecraft/CrashReport.java
index e52235ae17bddc768b291a45eb4492159bd65ac5..ff369f8b0424adc6560be197898e8a1efa2a417c 100644
--- a/src/main/java/net/minecraft/CrashReport.java
+++ b/src/main/java/net/minecraft/CrashReport.java
@@ -35,7 +35,7 @@ public class CrashReport {
         io.papermc.paper.util.StacktraceDeobfuscator.INSTANCE.deobfuscateThrowable(cause); // Paper
         this.title = message;
         this.exception = cause;
-        this.systemReport.setDetail("Prismarine Information", new org.bukkit.craftbukkit.CraftCrashReport()); // CraftBukkit // Prismarine
+        this.systemReport.setDetail("Leaf Information", new org.bukkit.craftbukkit.CraftCrashReport()); // CraftBukkit // Prismarine // Leaf
     }
 
     public String getTitle() {
@@ -125,7 +125,7 @@ public class CrashReport {
         stringbuilder.append("---- Minecraft Crash Report ----\n");
         // Purpur start
         stringbuilder.append("// ");
-        stringbuilder.append("// DO NOT REPORT THIS TO PAPER OR PURPUR! REPORT TO PRISMARINE INSTEAD!"); // Prismarine
+        stringbuilder.append("// DO NOT REPORT THIS TO PRISMARINE! REPORT TO LEAF INSTEAD!"); // Prismarine // Leaf
         // Purpur end
         stringbuilder.append("// ");
         stringbuilder.append(CrashReport.getErrorComment());
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3a0f6bcd0f28206a01f5cdb304c656f93767e6a1..cecd3930064b81e2ac5bb69482939f5ef802cf98 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -926,7 +926,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         shutdownThread = Thread.currentThread();
         org.spigotmc.WatchdogThread.doStop(); // Paper
         if (!isSameThread()) {
-            MinecraftServer.LOGGER.info("Stopping main thread (Ignore any thread death message you see! - DO NOT REPORT THREAD DEATH TO PRISMARINE)"); // Purpur // Prismarine
+            MinecraftServer.LOGGER.info("Stopping main thread (Ignore any thread death message you see! - DO NOT REPORT THREAD DEATH TO LEAF)"); // Purpur // Prismarine // Leaf
             while (this.getRunningThread().isAlive()) {
                 this.getRunningThread().stop();
                 try {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index e874a543d42e18e3682abfaa16b018d8eab1d305..8727f5902b140996097fc6168593bc5ec143efd2 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -1015,7 +1015,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             TickingBlockEntity tickingblockentity = (TickingBlockEntity) this.blockEntityTickers.get(tileTickPosition);
             // Spigot start
             if (tickingblockentity == null) {
-                this.getCraftServer().getLogger().severe("Prismarine has detected a null entity and has removed it, preventing a crash"); // Prismarine
+                this.getCraftServer().getLogger().severe("Leaf has detected a null entity and has removed it, preventing a crash"); // Prismarine // Leaf
                 tilesThisCycle--;
                 continue;
             }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
index 02d877ebc0f4e0e8d24c1c432f8a654bef01f30f..5e24af990eb148f4ee43a7c13b03ae7287a1018f 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -113,7 +113,7 @@ public class RegionFileStorage implements AutoCloseable {
 
     // Paper start
     private static void printOversizedLog(String msg, Path file, int x, int z) {
-        net.minecraft.server.MinecraftServer.LOGGER.error(com.mojang.logging.LogUtils.FATAL_MARKER, msg + " (" + file.toString().replaceAll(".+[\\\\/]", "") + " - " + x + "," + z + ") Go clean it up to remove this message. /minecraft:tp " + (x<<4)+" 128 "+(z<<4) + " - DO NOT REPORT THIS TO PRISMARINE - You may ask for help on Discord, but do not file an issue. These error messages can not be removed."); // Purpur // Prismarine - JettPack patches (Remove unnecessary getLogger())
+        net.minecraft.server.MinecraftServer.LOGGER.error(com.mojang.logging.LogUtils.FATAL_MARKER, msg + " (" + file.toString().replaceAll(".+[\\\\/]", "") + " - " + x + "," + z + ") Go clean it up to remove this message. /minecraft:tp " + (x<<4)+" 128 "+(z<<4) + " - DO NOT REPORT THIS TO LEAF - You may ask for help on Discord, but do not file an issue. These error messages can not be removed."); // Purpur // Prismarine // Leaf - JettPack patches (Remove unnecessary getLogger())
     }
 
     private static final int DEFAULT_SIZE_THRESHOLD = 1024 * 8;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ab4054f09f5a617e3102f76e0fe554ccf6d2c56f..76f5bbba8b33e7d6f138613582844f321e423865 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -249,7 +249,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Prismarine"; // Paper // Pufferfish // Purpur // Prismarine
+    private final String serverName = "Leaf"; // Paper // Pufferfish // Purpur // Prismarine // Leaf
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 37cc1388b3cf6a49832c8504875aa04d318638b4..b68dead9bb94fb2b82a1bf67fdefa9a6d25b7bfc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -866,7 +866,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
             return EntityCategory.WATER;
         }
 
-        throw new UnsupportedOperationException("Unsupported monster type: " + type + ". This is a bug, report this to Prismarine."); // Purpur // Prismarine
+        throw new UnsupportedOperationException("Unsupported monster type: " + type + ". This is a bug, report this to Leaf."); // Purpur // Prismarine // Leaf
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 490f2179b0ec4a7946c79e7b5a233a8909972752..308f57b9ce432c29129d0c009c13b1d7f06c2e96 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -504,7 +504,7 @@ public class CraftScheduler implements BukkitScheduler {
                 this.parsePending();
             } else {
                 //this.debugTail = this.debugTail.setNext(new CraftAsyncDebugger(currentTick + CraftScheduler.RECENT_TICKS, task.getOwner(), task.getTaskClass())); // Paper
-                task.getOwner().getLogger().log(Level.SEVERE, "Unexpected Async Task in the Sync Scheduler. Report this to Prismarine"); // Paper // Purpur // Prismarine
+                task.getOwner().getLogger().log(Level.SEVERE, "Unexpected Async Task in the Sync Scheduler. Report this to Leaf"); // Paper // Purpur // Prismarine // Leaf
                 // We don't need to parse pending
                 // (async tasks must live with race-conditions if they attempt to cancel between these few lines of code)
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 72ed3ff31682673c045be76bf5329894704b84d0..a2a93d13e0b82ab7950121e1cb056e0495c34b31 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -14,7 +14,7 @@ public final class Versioning {
         bukkitVersion = "Unknown-Version";
     // Prismarine end
 
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/net.prismarineteam.prismarine/Prismarine-API/pom.properties"); // Purpur // Prismarine
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/org.dreeam.leaf/leaf-api/pom.properties"); // Purpur // Prismarine // Leaf
         Properties properties = new Properties();
 
         if (stream != null) {
@@ -23,7 +23,7 @@ public final class Versioning {
 
                 bukkitVersion = properties.getProperty("version"); // Prismarine - JettPack patches
             } catch (IOException ex) {
-                Logger.getLogger(Versioning.class.getName()).log(Level.SEVERE, "Could not get Prismarine version!", ex); // Prismarine
+                Logger.getLogger(Versioning.class.getName()).log(Level.SEVERE, "Could not get Leaf version!", ex); // Prismarine // Leaf
             }
         }
     }
diff --git a/src/main/java/org/purpurmc/purpur/PurpurConfig.java b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
index d390fd4aeec7b75e65819d0e1f040b638e3b2433..91d9e831ef84e7c8ee72bd8327f4ebd0ddb828f9 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
@@ -248,7 +248,7 @@ public class PurpurConfig {
         if (!TimingsManager.hiddenConfigs.contains("settings.seed")) TimingsManager.hiddenConfigs.add("settings.seed");
     }
 
-    public static String serverModName = "Prismarine"; // Prismarine
+    public static String serverModName = "Leaf"; // Prismarine // Leaf
     private static void serverModName() {
         serverModName = getString("settings.server-mod-name", serverModName);
     }
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 07554d02995675469ff29cd0f2903d1022e56026..03012a1fcf49ddcfd4375ca6ad59f14c004a9ffd 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -96,7 +96,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
 
     private WatchdogThread(long timeoutTime, boolean restart)
     {
-        super( "Prismarine Watchdog Thread" ); // Purpur - use a generic name // Prismarine - We don't want to
+        super( "Leaf Watchdog Thread" ); // Purpur - use a generic name // Prismarine - We don't want to // Leaf - UwU
         this.timeoutTime = timeoutTime;
         this.restart = restart;
         earlyWarningEvery = Math.min(io.papermc.paper.configuration.GlobalConfiguration.get().watchdog.earlyWarningEvery, timeoutTime); // Paper
@@ -155,14 +155,14 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
                 if (isLongTimeout) {
                 // Paper end
                 log.log( Level.SEVERE, "------------------------------" );
-                log.log( Level.SEVERE, "The server has stopped responding! This is (probably) not a Prismarine bug." ); // Paper // Purpur // Prismarine
+                log.log( Level.SEVERE, "The server has stopped responding! This is (probably) not a Leaf bug." ); // Paper // Purpur // Prismarine // Leaf
                 log.log( Level.SEVERE, "If you see a plugin in the Server thread dump below, then please report it to that author" );
                 log.log( Level.SEVERE, "\t *Especially* if it looks like HTTP or MySQL operations are occurring" );
                 log.log( Level.SEVERE, "If you see a world save or edit, then it means you did far more than your server can handle at once" );
                 log.log( Level.SEVERE, "\t If this is the case, consider increasing timeout-time in spigot.yml but note that this will replace the crash with LARGE lag spikes" );
-                log.log( Level.SEVERE, "If you are unsure or still think this is a Prismarine bug, please report this to https://github.com/PrismarineTeam/Prismarine/issues" ); // Purpur // Prismarine
+                log.log( Level.SEVERE, "If you are unsure or still think this is a Leaf bug, please report this to https://github.com/Dreeam-qwq/Leaf/issues" ); // Purpur // Prismarine // Leaf
                 log.log( Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports" );
-                log.log( Level.SEVERE, "Prismarine version: " + Bukkit.getServer().getVersion() ); // Purpur // Prismarine
+                log.log( Level.SEVERE, "Leaf version: " + Bukkit.getServer().getVersion() ); // Purpur // Prismarine // Leaf
                 //
                 if ( net.minecraft.world.level.Level.lastPhysicsProblem != null )
                 {
@@ -185,12 +185,12 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
                 // Paper end
                 } else
                 {
-                    log.log(Level.SEVERE, "--- DO NOT REPORT THIS TO PRISMARINE - THIS IS NOT A BUG OR A CRASH  - " + Bukkit.getServer().getVersion() + " ---"); // Purpur // Prismarine
+                    log.log(Level.SEVERE, "--- DO NOT REPORT THIS TO LEAF - THIS IS NOT A BUG OR A CRASH  - " + Bukkit.getServer().getVersion() + " ---"); // Purpur // Prismarine // Leaf
                     log.log(Level.SEVERE, "The server has not responded for " + (currentTime - lastTick) / 1000 + " seconds! Creating thread dump");
                 }
                 // Paper end - Different message for short timeout
                 log.log( Level.SEVERE, "------------------------------" );
-                log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Prismarine!):" ); // Paper // Purpur // Prismarine
+                log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Leaf!):" ); // Paper // Purpur // Prismarine // Leaf
                 io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.dumpAllChunkLoadInfo(isLongTimeout); // Paper // Paper - rewrite chunk system
                 this.dumpTickingInfo(); // Paper - log detailed tick information
                 WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
@@ -206,7 +206,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
                     WatchdogThread.dumpThread( thread, log );
                 }
                 } else {
-                    log.log(Level.SEVERE, "--- DO NOT REPORT THIS TO PRISMARINE - THIS IS NOT A BUG OR A CRASH ---"); // Purpur // Prismarine
+                    log.log(Level.SEVERE, "--- DO NOT REPORT THIS TO LEAF - THIS IS NOT A BUG OR A CRASH ---"); // Purpur // Prismarine // Leaf
                 }
 
                 log.log( Level.SEVERE, "------------------------------" );
