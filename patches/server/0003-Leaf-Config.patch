From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dreeam <61569423+Dreeam-qwq@users.noreply.github.com>
Date: Wed, 12 Oct 2022 10:42:15 -0400
Subject: [PATCH] Leaf Config

TODO - Dreeam:
Add per world config
Add config reload

diff --git a/build.gradle.kts b/build.gradle.kts
index 955413bc5717b73054777d36c8b06da8817f8271..def008852a4fc0ad7c481e73dfaa178d67145f47 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -14,6 +14,13 @@ val alsoShade: Configuration by configurations.creating
 
 dependencies {
     implementation(project(":leaf-api")) // Gale start - project setup - Depend on own API // Leaf
+
+    // Leaf start - Leaf Config
+    implementation("com.github.thatsmusic99:ConfigurationMaster-API:v2.0.0-rc.2") {
+        exclude(group = "org.yaml", module = "snakeyaml")
+    }
+    // Leaf end - Leaf Config
+
     // Paper start
     implementation("org.jline:jline-terminal-jansi:3.21.0")
     implementation("net.minecrell:terminalconsoleappender:1.3.0")
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index f76ca394169d844a263a53c31c30e57de4381e0d..d2ea951c7e5899d0e2edb52064e35c23965c4230 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -123,6 +123,7 @@ public class Main {
             Bootstrap.bootStrap();
             Bootstrap.validate();
             Util.startTimerHackThread();
+            org.dreeam.leaf.config.LeafConfig.loadConfig(); // Leaf
             Path path1 = Paths.get("server.properties");
             DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
 
diff --git a/src/main/java/org/dreeam/leaf/config/DoNotLoad.java b/src/main/java/org/dreeam/leaf/config/DoNotLoad.java
new file mode 100644
index 0000000000000000000000000000000000000000..42ce82d388336906a91547b81f6f70766f2b10f0
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/DoNotLoad.java
@@ -0,0 +1,8 @@
+package org.dreeam.leaf.config;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface DoNotLoad {
+}
diff --git a/src/main/java/org/dreeam/leaf/config/EnumConfigCategory.java b/src/main/java/org/dreeam/leaf/config/EnumConfigCategory.java
new file mode 100644
index 0000000000000000000000000000000000000000..7d99f0711c6b4f298dd296c26c11dd9d4b633264
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/EnumConfigCategory.java
@@ -0,0 +1,26 @@
+package org.dreeam.leaf.config;
+
+public enum EnumConfigCategory {
+
+    ASYNC("async"),
+    PERF("performance"),
+    FIXES("fixes"),
+    GAMEPLAY("gameplay-mechanisms"),
+    NETWORK("network"),
+    MISC("misc");
+
+    private final String baseKeyName;
+    private static final EnumConfigCategory[] VALUES = EnumConfigCategory.values();
+
+    EnumConfigCategory(String baseKeyName) {
+        this.baseKeyName = baseKeyName;
+    }
+
+    public String getBaseKeyName() {
+        return this.baseKeyName;
+    }
+
+    public static EnumConfigCategory[] getCategoryValues() {
+        return VALUES;
+    }
+}
diff --git a/src/main/java/org/dreeam/leaf/config/HotReloadUnsupported.java b/src/main/java/org/dreeam/leaf/config/HotReloadUnsupported.java
new file mode 100644
index 0000000000000000000000000000000000000000..f7ab1ff5f298ff1e5e16fe5396d1e9e62a55fdfb
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/HotReloadUnsupported.java
@@ -0,0 +1,8 @@
+package org.dreeam.leaf.config;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface HotReloadUnsupported {
+}
diff --git a/src/main/java/org/dreeam/leaf/config/LeafConfig.java b/src/main/java/org/dreeam/leaf/config/LeafConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..599f2e0af4d8a0ec58b7c8e58bffaaf56ab8bcec
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/LeafConfig.java
@@ -0,0 +1,284 @@
+package org.dreeam.leaf.config;
+
+import io.github.thatsmusic99.configurationmaster.api.ConfigFile;
+import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.net.JarURLConnection;
+import java.net.URL;
+import java.net.URLDecoder;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.FileAlreadyExistsException;
+import java.nio.file.Files;
+import java.util.Enumeration;
+import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.CompletableFuture;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+/*
+ *  Yoinked from: https://github.com/xGinko/AnarchyExploitFixes/
+ *  @author: xGinko
+ */
+public class LeafConfig {
+
+    public static final Logger LOGGER = LogManager.getLogger(LeafConfig.class.getSimpleName());
+    private static final File I_CONFIG_FOLDER = new File("config");
+    private static final String I_CONFIG_PKG = "org.dreeam.leaf.config.modules";
+    private static final String I_GLOBAL_CONFIG_FILE = "leaf-global.yml";
+    private static final String I_LEVEL_CONFIG_FILE = "leaf-world-defaults.yml"; // Leaf TODO - Per level config
+
+    private static ConfigFile configFile;
+    private static LeafConfig config;
+    private static final Set<Class<?>> modules = new HashSet<>();
+
+    public LeafConfig(boolean init) {
+        try {
+            // Create config folder
+            createDirectory(I_CONFIG_FOLDER);
+
+            configFile = ConfigFile.loadConfig(new File(I_CONFIG_FOLDER, I_GLOBAL_CONFIG_FILE));
+            configFile.set("config-version", 3.0);
+            configFile.addComments("config-version", """
+                    Leaf Config
+                    Github Repo: https://github.com/Winds-Studio/Leaf
+                    Discord: dreeam___ | QQ: 2682173972""");
+
+            // Pre-structure to force order
+            structureConfig();
+
+            // Load config modules
+            initModules();
+
+            // Save config to disk
+            saveConfig();
+        } catch (Exception e) {
+            LOGGER.error("Failed to load config modules!", e);
+        }
+    }
+
+    public static void reload() {
+        try {
+            config = loadConfig(false);
+        } catch (Exception e) {
+            LOGGER.error("Failed to reload config", e);
+        }
+    }
+
+    @Contract(" -> new")
+    public static @NotNull CompletableFuture<Void> reloadAsync() {
+        return new CompletableFuture<>();
+    }
+
+    public static void loadConfig() {
+        LOGGER.info("Loading config...");
+        config = loadConfig(true);
+    }
+
+    // Load config.yml with ConfigMaster
+    private static LeafConfig loadConfig(boolean init) {
+        return new LeafConfig(init);
+    }
+
+    private void structureConfig() {
+        for (EnumConfigCategory configCate : EnumConfigCategory.getCategoryValues()) {
+            createTitledSection(configCate.name(), configCate.getBaseKeyName());
+        }
+    }
+
+    private void createDirectory(File dir) throws IOException {
+        try {
+            Files.createDirectories(dir.toPath());
+        } catch (FileAlreadyExistsException e) { // Thrown if dir exists but is not a directory
+            if (dir.delete()) createDirectory(dir);
+        }
+    }
+
+    public void saveConfig() throws Exception {
+        configFile.save();
+    }
+
+    public LeafConfig config() {
+        return config;
+    }
+
+    // Scan classes under package util
+
+    private void initModules() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
+        for (Class<?> clazz : getClasses(I_CONFIG_PKG)) {
+            Class<?> module = (Class<?>) clazz.getConstructor().newInstance();
+            module.getMethod("init").invoke(null);
+
+            modules.add(module);
+        }
+    }
+
+    public static @NotNull Set<Class<?>> getClasses(String pack) {
+        Set<Class<?>> classes = new LinkedHashSet<>();
+        String packageDirName = pack.replace('.', '/');
+        Enumeration<URL> dirs;
+
+        try {
+            dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);
+            while (dirs.hasMoreElements()) {
+                URL url = dirs.nextElement();
+                String protocol = url.getProtocol();
+                if ("file".equals(protocol)) {
+                    String filePath = URLDecoder.decode(url.getFile(), StandardCharsets.UTF_8);
+                    findClassesInPackageByFile(pack, filePath, classes);
+                } else if ("jar".equals(protocol)) {
+                    JarFile jar;
+                    try {
+                        jar = ((JarURLConnection) url.openConnection()).getJarFile();
+                        Enumeration<JarEntry> entries = jar.entries();
+                        findClassesInPackageByJar(pack, entries, packageDirName, classes);
+                    } catch (IOException e) {
+                        throw new RuntimeException(e);
+                    }
+                }
+            }
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+
+        return classes;
+    }
+
+    private static void findClassesInPackageByFile(String packageName, String packagePath, Set<Class<?>> classes) {
+        File dir = new File(packagePath);
+
+        if (!dir.exists() || !dir.isDirectory()) {
+            return;
+        }
+
+        File[] dirfiles = dir.listFiles((file) -> file.isDirectory() || file.getName().endsWith(".class"));
+        if (dirfiles != null) {
+            for (File file : dirfiles) {
+                if (file.isDirectory()) {
+                    findClassesInPackageByFile(packageName + "." + file.getName(), file.getAbsolutePath(), classes);
+                } else {
+                    String className = file.getName().substring(0, file.getName().length() - 6);
+                    try {
+                        classes.add(Class.forName(packageName + '.' + className));
+                    } catch (ClassNotFoundException e) {
+                        throw new RuntimeException(e);
+                    }
+                }
+            }
+        }
+    }
+
+    private static void findClassesInPackageByJar(String packageName, Enumeration<JarEntry> entries, String packageDirName, Set<Class<?>> classes) {
+        while (entries.hasMoreElements()) {
+            JarEntry entry = entries.nextElement();
+            String name = entry.getName();
+
+            if (name.charAt(0) == '/') {
+                name = name.substring(1);
+            }
+
+            if (name.startsWith(packageDirName)) {
+                int idx = name.lastIndexOf('/');
+
+                if (idx != -1) {
+                    packageName = name.substring(0, idx).replace('/', '.');
+                }
+
+                if (name.endsWith(".class") && !entry.isDirectory()) {
+                    String className = name.substring(packageName.length() + 1, name.length() - 6);
+                    try {
+                        classes.add(Class.forName(packageName + '.' + className));
+                    } catch (ClassNotFoundException e) {
+                        throw new RuntimeException(e);
+                    }
+                }
+            }
+        }
+    }
+
+    // Config Utilities
+
+    public void createTitledSection(String title, String path) {
+        configFile.addSection(title);
+        configFile.addDefault(path, null);
+    }
+
+    public boolean getBoolean(String path, boolean def, String comment) {
+        configFile.addDefault(path, def, comment);
+        return configFile.getBoolean(path, def);
+    }
+
+    public boolean getBoolean(String path, boolean def) {
+        configFile.addDefault(path, def);
+        return configFile.getBoolean(path, def);
+    }
+
+    public String getString(String path, String def, String comment) {
+        configFile.addDefault(path, def, comment);
+        return configFile.getString(path, def);
+    }
+
+    public String getString(String path, String def) {
+        configFile.addDefault(path, def);
+        return configFile.getString(path, def);
+    }
+
+    public double getDouble(String path, double def, String comment) {
+        configFile.addDefault(path, def, comment);
+        return configFile.getDouble(path, def);
+    }
+
+    public double getDouble(String path, double def) {
+        configFile.addDefault(path, def);
+        return configFile.getDouble(path, def);
+    }
+
+    public int getInt(String path, int def, String comment) {
+        configFile.addDefault(path, def, comment);
+        return configFile.getInteger(path, def);
+    }
+
+    public int getInt(String path, int def) {
+        configFile.addDefault(path, def);
+        return configFile.getInteger(path, def);
+    }
+
+    public List<String> getList(String path, List<String> def, String comment) {
+        configFile.addDefault(path, def, comment);
+        return configFile.getStringList(path);
+    }
+
+    public List<String> getList(String path, List<String> def) {
+        configFile.addDefault(path, def);
+        return configFile.getStringList(path);
+    }
+
+    public ConfigSection getConfigSection(String path, Map<String, Object> defaultKeyValue) {
+        configFile.addDefault(path, null);
+        configFile.makeSectionLenient(path);
+        defaultKeyValue.forEach((string, object) -> configFile.addExample(path + "." + string, object));
+        return configFile.getConfigSection(path);
+    }
+
+    public ConfigSection getConfigSection(String path, Map<String, Object> defaultKeyValue, String comment) {
+        configFile.addDefault(path, null, comment);
+        configFile.makeSectionLenient(path);
+        defaultKeyValue.forEach((string, object) -> configFile.addExample(path + "." + string, object));
+        return configFile.getConfigSection(path);
+    }
+
+    public void addComment(String path, String comment) {
+        configFile.addComment(path, comment);
+    }
+}
