From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: HaHaWTH <102713261+HaHaWTH@users.noreply.github.com>
Date: Mon, 1 Nov 2077 00:00:00 +0800
Subject: [PATCH] Async structure locate api

This patch depends on Asynchronous locator patch.

Added some asynchronous structure locate methods in World,
requires async-locator to be enabled in Leaf config, or else it will fall back to sync methods.

diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 3af8eb8064aeafa3606fed23e7ca2bc74c194726..bde99ad96b722039a2f89a0fa07a660b5179f4fd 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -4047,6 +4047,58 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
     @Nullable
     StructureSearchResult locateNearestStructure(@NotNull Location origin, @NotNull Structure structure, int radius, boolean findUnexplored);
 
+    // Leaf start - Async structure locate api
+    /**
+     * Find the closest nearby structure of a given {@link StructureType} asynchronously.
+     * <p>
+     * The {@code radius} is not a rigid square radius. Each structure may alter
+     * how many chunks to check for each iteration. Do not assume that only a
+     * radius x radius chunk area will be checked. For example,
+     * {@link StructureType#WOODLAND_MANSION} can potentially check up to 20,000
+     * blocks away (or more) regardless of the radius used.
+     * <p>
+     * This will <i>not</i> load or generate chunks.
+     * <p>
+     * The difference between searching for a {@link StructureType} and a
+     * {@link Structure} is, that a {@link StructureType} can refer to multiple
+     * {@link Structure Structures} while searching for a {@link Structure}
+     * while only search for the given {@link Structure}.
+     *
+     * @param origin where to start looking for a structure
+     * @param structureType the type of structure to find
+     * @param radius the radius, in chunks, around which to search
+     * @param findUnexplored true to only find unexplored structures
+     * @param afterComplete the action to perform once the search is complete.
+     * @see #locateNearestStructureAsync(Location, Structure, int, boolean, Consumer)
+     */
+    void locateNearestStructureAsync(@NotNull Location origin, @NotNull StructureType structureType, int radius, boolean findUnexplored, @NotNull Consumer<@Nullable StructureSearchResult> afterComplete);
+
+    /**
+     * Find the closest nearby structure of a given {@link Structure} asynchronously.
+     * <p>
+     * The {@code radius} is not a rigid square radius. Each structure may alter
+     * how many chunks to check for each iteration. Do not assume that only a
+     * radius x radius chunk area will be checked. For example,
+     * {@link Structure#MANSION} can potentially check up to 20,000 blocks away
+     * (or more) regardless of the radius used.
+     * <p>
+     * This will <i>not</i> load or generate chunks.
+     * <p>
+     * The difference between searching for a {@link StructureType} and a
+     * {@link Structure} is, that a {@link StructureType} can refer to multiple
+     * {@link Structure Structures} while searching for a {@link Structure}
+     * while only search for the given {@link Structure}.
+     *
+     * @param origin where to start looking for a structure
+     * @param structure the structure to find
+     * @param radius the radius, in chunks, around which to search
+     * @param findUnexplored true to only find unexplored structures
+     * @param afterComplete the action to perform on server thread once the search is complete.
+     * @see #locateNearestStructureAsync(Location, StructureType, int, boolean, Consumer)
+     */
+    void locateNearestStructureAsync(@NotNull Location origin, @NotNull Structure structure, int radius, boolean findUnexplored, @NotNull Consumer<@Nullable StructureSearchResult> afterComplete);
+    // Leaf end - Async structure locate api
+
     // Paper start
     /**
      * Locates the nearest biome based on an origin, biome type, and radius to search.
