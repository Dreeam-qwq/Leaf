From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Sun, 23 Feb 2025 00:37:39 +0100
Subject: [PATCH] Make removeIf slightly faster


diff --git a/net/minecraft/util/SortedArraySet.java b/net/minecraft/util/SortedArraySet.java
index bde5b4cb4cda003acd7343b16f09f915b71fe3f2..7af029d8c2677ef00186acb5a3794b0ab3267ebd 100644
--- a/net/minecraft/util/SortedArraySet.java
+++ b/net/minecraft/util/SortedArraySet.java
@@ -18,35 +18,22 @@ public class SortedArraySet<T> extends AbstractSet<T> implements ca.spottedleaf.
     // Paper start - rewrite chunk system
     @Override
     public final boolean removeIf(final java.util.function.Predicate<? super T> filter) {
-        // prev. impl used an iterator, which could be n^2 and creates garbage
         int i = 0;
         final int len = this.size;
         final T[] backingArray = this.contents;
 
-        for (;;) {
-            if (i >= len) {
-                return false;
-            }
-            if (!filter.test(backingArray[i])) {
-                ++i;
-                continue;
-            }
-            break;
-        }
+        // Find first element to remove
+        while (i < len && !filter.test(backingArray[i])) i++;
+        if (i == len) return false;
 
-        // we only want to write back to backingArray if we really need to
-
-        int lastIndex = i; // this is where new elements are shifted to
-
-        for (; i < len; ++i) {
-            final T curr = backingArray[i];
-            if (!filter.test(curr)) { // if test throws we're screwed
-                backingArray[lastIndex++] = curr;
-            }
+        // Shift elements in-place
+        int lastIndex = i;
+        for (i++; i < len; i++) {
+            T curr = backingArray[i];
+            if (!filter.test(curr)) backingArray[lastIndex++] = curr;
         }
 
-        // cleanup end
-        Arrays.fill(backingArray, lastIndex, len, null);
+        // Only update size - skip Arrays.fill (safe in ChunkHolderManager's context)
         this.size = lastIndex;
         return true;
     }
