From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Fri, 14 Feb 2025 20:08:14 +0100
Subject: [PATCH] Cache eligible players for despawn checks


diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index 1277b4b6b5283afebb78b403824e6a5aa1e5734f..427bac8001e43826fa4922ef3bb91c6d2d93f858 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -735,6 +735,8 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         return this.structureManager;
     }
 
+    public Player[] eligibleDespawnCheckingPlayerCache = new Player[0]; // Leaf - Cache eligible players for despawn checks
+
     public void tick(BooleanSupplier hasTimeLeft) {
         this.handlingTick = true;
         TickRateManager tickRateManager = this.tickRateManager();
@@ -802,6 +804,19 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             }
 
             io.papermc.paper.entity.activation.ActivationRange.activateEntities(this); // Paper - EAR
+
+            // Leaf start - Cache eligible players for despawn checks
+            List<ServerPlayer> serverPlayers = new ArrayList<>(players().size());
+            for (int i = 0; i < players().size(); i++) {
+                ServerPlayer player = players().get(i);
+                if (net.minecraft.world.entity.EntitySelector.PLAYER_AFFECTS_SPAWNING.test(player)) {
+                    serverPlayers.add(player);
+                }
+            }
+
+            eligibleDespawnCheckingPlayerCache = serverPlayers.toArray(new Player[0]);
+            // Leaf end - Cache eligible players for despawn checks
+
             this.entityTickList
                 .forEach(
                     entity -> {
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 01c30802a1d0127f2ed36efa7511c2ac6b2b5cfa..523d27ae8837bc4da2f993964aa99ab91617ec01 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1569,6 +1569,13 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
         this.containerMenu.broadcastChanges();
     }
 
+    // Leaf start - Cache eligible players for despawn checks
+    @Override
+    public boolean isAlive() {
+        return !this.isRemoved() && this.entityData.get(DATA_HEALTH_ID) > 0.0f && !this.dead;
+    }
+    // Leaf end - Cache eligible players for despawn checks
+
     // CraftBukkit start - moved bed result checks from below into separate method
     private Either<Player.BedSleepingProblem, Unit> getBedResult(BlockPos at, Direction direction) {
         if (this.isSleeping() || !this.isAlive()) {
diff --git a/net/minecraft/world/entity/Mob.java b/net/minecraft/world/entity/Mob.java
index b541236c39e3f36bcc619fffe83e32987df20adf..67d9415a53813675d9b7dadf928756d59204208e 100644
--- a/net/minecraft/world/entity/Mob.java
+++ b/net/minecraft/world/entity/Mob.java
@@ -854,7 +854,24 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         if (this.level().getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
             this.discard(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
         } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
-            Entity nearestPlayer = this.level().findNearbyPlayer(this, -1.0, EntitySelector.PLAYER_AFFECTS_SPAWNING); // Paper - Affects Spawning API
+            // Leaf start - Cache eligible players for despawn checks
+            Entity nearestPlayer = null;
+
+            if (this.level() instanceof ServerLevel serverLevel) {
+                double minDist = Double.MAX_VALUE;
+                for (int i = 0; i < serverLevel.eligibleDespawnCheckingPlayerCache.length; i++) {
+                    Player cachedPlayer = serverLevel.eligibleDespawnCheckingPlayerCache[i];
+                    double d1 = cachedPlayer.distanceToSqr(this);
+                    if (d1 <= minDist) {
+                        minDist = d1;
+                        nearestPlayer = cachedPlayer;
+                    }
+                }
+            } else {
+                nearestPlayer = this.level().findNearbyPlayer(this, -1.0, EntitySelector.PLAYER_AFFECTS_SPAWNING); // Paper - Affects Spawning API
+            }
+            // Leaf end - Cache eligible players for despawn checks
+
             if (nearestPlayer != null) {
                 // Paper start - Configurable despawn distances
                 final io.papermc.paper.configuration.WorldConfiguration.Entities.Spawning.DespawnRangePair despawnRangePair = this.level().paperConfig().entities.spawning.despawnRanges.get(this.getType().getCategory());
