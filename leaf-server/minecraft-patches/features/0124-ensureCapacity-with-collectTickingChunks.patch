From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Sun, 16 Feb 2025 01:13:04 +0100
Subject: [PATCH] ensureCapacity with collectTickingChunks


diff --git a/net/minecraft/server/level/ServerChunkCache.java b/net/minecraft/server/level/ServerChunkCache.java
index dd956431bb882daa70267685f2283d0c358336be..a4449c3b9af13b15540708bade627f0cc3b3365f 100644
--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -3,6 +3,7 @@ package net.minecraft.server.level;
 import com.google.common.annotations.VisibleForTesting;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import it.unimi.dsi.fastutil.longs.LongComparators;
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
 import java.io.IOException;
 import java.nio.file.Path;
@@ -573,17 +574,13 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
         final ServerChunkCache.ChunkAndHolder[] raw = tickingChunks.getRawDataUnchecked();
         final int size = tickingChunks.size();
 
-        final ChunkMap chunkMap = this.chunkMap;
+        // Directly add all pre-filtered ticking chunks to output
+        if (output instanceof ArrayList<LevelChunk> arrayList) {
+            arrayList.ensureCapacity(size);
+        }
 
         for (int i = 0; i < size; ++i) {
-            final ServerChunkCache.ChunkAndHolder chunkAndHolder = raw[i];
-            final LevelChunk levelChunk = chunkAndHolder.chunk();
-
-            if (!this.isChunkNearPlayer(chunkMap, levelChunk.getPos(), levelChunk)) {
-                continue;
-            }
-
-            output.add(levelChunk);
+            output.add(raw[i].chunk());
         }
         // Paper end - chunk tick iteration optimisation
     }
