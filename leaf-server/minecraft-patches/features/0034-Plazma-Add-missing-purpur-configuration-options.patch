From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <dev@alpha93.kr>
Date: Sat, 25 Mar 2023 00:52:11 +0900
Subject: [PATCH] Plazma: Add missing purpur configuration options

Original license: MIT
Original project: https://github.com/PlazmaMC/PlazmaBukkit

Add more Purpur configurable options for entities

diff --git a/net/minecraft/world/entity/animal/allay/Allay.java b/net/minecraft/world/entity/animal/allay/Allay.java
index a642533eddd1aca96ad57c2a219f00870a615f71..77e40bbfb567c2853d491343c203095bf5a81e0c 100644
--- a/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/net/minecraft/world/entity/animal/allay/Allay.java
@@ -179,6 +179,18 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     }
     // Purpur end - Configurable entity base attributes
 
+    // Leaf start - Plazma - Add missing purpur configuration options
+    @Override
+    public boolean isSensitiveToWater() {
+        return level().purpurConfig.allayTakeDamageFromWater;
+    }
+
+    @Override
+    public boolean isAlwaysExperienceDropper() {
+        return level().purpurConfig.allayAlwaysDropExp;
+    }
+    // Leaf end - Plazma - Add missing purpur configuration options
+
     @Override
     protected Brain.Provider<Allay> brainProvider() {
         return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
diff --git a/net/minecraft/world/entity/animal/camel/Camel.java b/net/minecraft/world/entity/animal/camel/Camel.java
index a7168edb338c5a77c884e9eef1e48bcdc3623fa4..e5f24eaa18045f6a33248c6f907ebcd9003c245e 100644
--- a/net/minecraft/world/entity/animal/camel/Camel.java
+++ b/net/minecraft/world/entity/animal/camel/Camel.java
@@ -95,6 +95,18 @@ public class Camel extends AbstractHorse {
     }
     // Purpur end - Make entity breeding times configurable
 
+    // Leaf start - Plazma - Add missing purpur configuration options
+    @Override
+    public boolean isSensitiveToWater() {
+        return level().purpurConfig.camelTakeDamageFromWater;
+    }
+
+    @Override
+    public boolean isAlwaysExperienceDropper() {
+        return level().purpurConfig.camelAlwaysDropExp;
+    }
+    // Leaf start - Plazma - Add missing purpur configuration options
+
     @Override
     public void addAdditionalSaveData(CompoundTag compound) {
         super.addAdditionalSaveData(compound);
@@ -159,7 +171,7 @@ public class Camel extends AbstractHorse {
     @Override
     protected void customServerAiStep(ServerLevel level) {
         Brain<?> brain = this.getBrain();
-        if (this.behaviorTick++ % this.activatedPriority == 0) // Leaf - Plazma - Add missing Pufferfish configurations
+        if ((getRider() == null || !this.isControllable()) && this.behaviorTick++ % this.activatedPriority == 0) // Leaf - Plazma - Add missing Pufferfish configurations // Leaf - Plazma - Add missing purpur configuration options
         ((Brain<Camel>)brain).tick(level, this);
         CamelAi.updateActivity(this);
         super.customServerAiStep(level);
diff --git a/net/minecraft/world/entity/animal/frog/Frog.java b/net/minecraft/world/entity/animal/frog/Frog.java
index 6e5cb137b3aa91321528d00a1433009cb9a0e656..fca179b8c30083eab1f4a3057d24f0f9100d490d 100644
--- a/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/net/minecraft/world/entity/animal/frog/Frog.java
@@ -170,6 +170,23 @@ public class Frog extends Animal implements VariantHolder<Holder<FrogVariant>> {
     }
     // Purpur end - Make entity breeding times configurable
 
+    // Leaf start - Plazma - Add missing purpur configuration options
+    @Override
+    public boolean isSensitiveToWater() {
+        return level().purpurConfig.frogTakeDamageFromWater;
+    }
+
+    @Override
+    public boolean isAlwaysExperienceDropper() {
+        return level().purpurConfig.frogAlwaysDropExp;
+    }
+
+    @Override
+    public void initAttributes() {
+        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(level().purpurConfig.frogMaxHealth);
+    }
+    // Leaf end - Plazma - Add missing purpur configuration options
+
     @Override
     protected Brain.Provider<Frog> brainProvider() {
         return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
diff --git a/net/minecraft/world/entity/animal/frog/Tadpole.java b/net/minecraft/world/entity/animal/frog/Tadpole.java
index 0fdda6b24aee95170e54079e53125b4aed19ac0b..b295b4f2f4e13dd7fd577d126cd0ae72b47126a0 100644
--- a/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -105,6 +105,23 @@ public class Tadpole extends AbstractFish {
     }
     // Purpur end - Ridables
 
+    // Leaf start - Plazma - Add missing purpur configuration options
+    @Override
+    public boolean isSensitiveToWater() {
+        return level().purpurConfig.tadpoleTakeDamageFromWater;
+    }
+
+    @Override
+    public boolean isAlwaysExperienceDropper() {
+        return level().purpurConfig.tadpoleAlwaysDropExp;
+    }
+
+    @Override
+    public void initAttributes() {
+        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(level().purpurConfig.tadpoleMaxHealth);
+    }
+    // Leaf end - Plazma - Add missing purpur configuration options
+
     @Override
     protected PathNavigation createNavigation(Level level) {
         return new WaterBoundPathNavigation(this, level);
diff --git a/net/minecraft/world/entity/animal/sniffer/Sniffer.java b/net/minecraft/world/entity/animal/sniffer/Sniffer.java
index fec7ecfe6e692ee74762a6a53e51f92cf66a9177..20ce6607ed1c1c00dea5c0e95a4327845d1fb3d5 100644
--- a/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -118,6 +118,18 @@ public class Sniffer extends Animal {
     }
     // Purpur end - Make entity breeding times configurable
 
+    // Leaf start - Plazma - Add missing purpur configuration options
+    @Override
+    public boolean isSensitiveToWater() {
+        return level().purpurConfig.snifferTakeDamageFromWater;
+    }
+
+    @Override
+    public boolean isAlwaysExperienceDropper() {
+        return level().purpurConfig.snifferAlwaysDropExp;
+    }
+    // Leaf end - Plazma - Add missing purpur configuration options
+
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
@@ -485,7 +497,7 @@ public class Sniffer extends Animal {
     private int behaviorTick; // Leaf - Plazma - Add missing Pufferfish configurations
     @Override
     protected void customServerAiStep(ServerLevel level) {
-        if (this.behaviorTick++ % this.activatedPriority == 0) // Leaf - Plazma - Add missing Pufferfish configurations
+        if ((getRider() == null || !this.isControllable()) && this.behaviorTick++ % this.activatedPriority == 0) // Leaf - Plazma - Add missing Pufferfish configurations // Leaf - Plazma - Add missing purpur configuration options
         this.getBrain().tick(level, this);
         SnifferAi.updateActivity(this);
         super.customServerAiStep(level);
diff --git a/net/minecraft/world/entity/monster/creaking/Creaking.java b/net/minecraft/world/entity/monster/creaking/Creaking.java
index 07b60f61b4b676cab2072ad0cf1cf94fed9b44d6..bd2248ed7da175dbf71f99cc3be978bc5e790096 100644
--- a/net/minecraft/world/entity/monster/creaking/Creaking.java
+++ b/net/minecraft/world/entity/monster/creaking/Creaking.java
@@ -131,6 +131,18 @@ public class Creaking extends Monster {
     }
     // Purpur end - Configurable entity base attributes
 
+    // Leaf start - Plazma - Add missing purpur configuration options
+    @Override
+    public boolean isSensitiveToWater() {
+        return level().purpurConfig.wardenTakeDamageFromWater;
+    }
+
+    @Override
+    public boolean isAlwaysExperienceDropper() {
+        return level().purpurConfig.wardenAlwaysDropExp;
+    }
+    // Leaf end - Plazma - Add missing purpur configuration options
+
     @Override
     protected BodyRotationControl createBodyControl() {
         return new Creaking.CreakingBodyRotationControl(this);
@@ -233,7 +245,7 @@ public class Creaking extends Monster {
     private int behaviorTick; // Leaf - Plazma - Add missing Pufferfish configurations
     @Override
     protected void customServerAiStep(ServerLevel level) {
-        if (this.behaviorTick++ % this.activatedPriority == 0) // Leaf - Plazma - Add missing Pufferfish configurations
+        if ((getRider() == null || !this.isControllable()) && this.behaviorTick++ % this.activatedPriority == 0) // Leaf - Plazma - Add missing Pufferfish configurations // Leaf - Plazma - Add missing purpur configuration options
         this.getBrain().tick((ServerLevel)this.level(), this);
         CreakingAi.updateActivity(this);
     }
diff --git a/net/minecraft/world/entity/monster/warden/Warden.java b/net/minecraft/world/entity/monster/warden/Warden.java
index 3a43790fb91e778f4fc0730aecd0dde4a6d301c8..fddd6a91b0fa9d4e9472d53f5056b7dae76b7cbd 100644
--- a/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/net/minecraft/world/entity/monster/warden/Warden.java
@@ -153,6 +153,23 @@ public class Warden extends Monster implements VibrationSystem {
     }
     // Purpur end - Ridables
 
+    // Leaf start - Plazma - Add missing purpur configuration options
+    @Override
+    public boolean isSensitiveToWater() {
+        return level().purpurConfig.wardenTakeDamageFromWater;
+    }
+
+    @Override
+    public boolean isAlwaysExperienceDropper() {
+        return level().purpurConfig.wardenAlwaysDropExp;
+    }
+
+    @Override
+    public void initAttributes() {
+        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(level().purpurConfig.wardenMaxHealth);
+    }
+    // Leaf end - Plazma - Add missing purpur configuration options
+
     @Override
     public Packet<ClientGamePacketListener> getAddEntityPacket(ServerEntity entity) {
         return new ClientboundAddEntityPacket(this, entity, this.hasPose(Pose.EMERGING) ? 1 : 0);
@@ -307,7 +324,7 @@ public class Warden extends Monster implements VibrationSystem {
     private int behaviorTick = 0; // Pufferfish
     @Override
     protected void customServerAiStep(ServerLevel level) {
-        if (this.behaviorTick++ % this.activatedPriority == 0) // Pufferfish
+        if ((getRider() == null || !this.isControllable()) && this.behaviorTick++ % this.activatedPriority == 0) // Pufferfish // Leaf - Plazma - Add missing purpur configuration options
         this.getBrain().tick(level, this);
         super.customServerAiStep(level);
         if ((this.tickCount + this.getId()) % 120 == 0) {
diff --git a/net/minecraft/world/entity/vehicle/AbstractChestBoat.java b/net/minecraft/world/entity/vehicle/AbstractChestBoat.java
index b230955ae880d84fde40b4feffa5caf3c4449eb7..c8bdfaaf41e2309e4865806b42677064f3f7bfcb 100644
--- a/net/minecraft/world/entity/vehicle/AbstractChestBoat.java
+++ b/net/minecraft/world/entity/vehicle/AbstractChestBoat.java
@@ -27,7 +27,7 @@ import net.minecraft.world.level.storage.loot.LootTable;
 
 public abstract class AbstractChestBoat extends AbstractBoat implements HasCustomInventoryScreen, ContainerEntity {
     private static final int CONTAINER_SIZE = 27;
-    private NonNullList<ItemStack> itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
+    private NonNullList<ItemStack> itemStacks = NonNullList.withSize(org.purpurmc.purpur.PurpurConfig.chestBoatRows * 9, ItemStack.EMPTY); // Leaf - Plazma - Add missing purpur configuration options
     @Nullable
     private ResourceKey<LootTable> lootTable;
     private long lootTableSeed;
@@ -118,7 +118,7 @@ public abstract class AbstractChestBoat extends AbstractBoat implements HasCusto
 
     @Override
     public int getContainerSize() {
-        return 27;
+        return org.purpurmc.purpur.PurpurConfig.chestBoatRows * 9; // Leaf - Plazma - Add missing purpur configuration options
     }
 
     @Override
diff --git a/org/purpurmc/purpur/PurpurConfig.java b/org/purpurmc/purpur/PurpurConfig.java
index bbfd05509dfc2ee453f847d299b3d261324b6fa9..b8c8806789bd0060cd3faee5815bbf25c8715a9b 100644
--- a/org/purpurmc/purpur/PurpurConfig.java
+++ b/org/purpurmc/purpur/PurpurConfig.java
@@ -322,6 +322,7 @@ public class PurpurConfig {
     }
 
     public static int barrelRows = 3;
+    public static int chestBoatRows = 3; // Leaf - Plazma - Add missing purpur configuration options
     public static boolean enderChestSixRows = false;
     public static boolean enderChestPermissionRows = false;
     public static boolean cryingObsidianValidForPortalFrame = false;
@@ -364,6 +365,7 @@ public class PurpurConfig {
             case 1 -> 9;
             default -> 27;
         });
+        chestBoatRows = getInt("settings.blocks.chest_boat.rows", chestBoatRows); // Leaf - Plazma - Add missing purpur configuration options
         enderChestSixRows = getBoolean("settings.blocks.ender_chest.six-rows", enderChestSixRows);
         org.bukkit.event.inventory.InventoryType.ENDER_CHEST.setDefaultSize(enderChestSixRows ? 54 : 27);
         enderChestPermissionRows = getBoolean("settings.blocks.ender_chest.use-permissions-for-rows", enderChestPermissionRows);
diff --git a/org/purpurmc/purpur/PurpurWorldConfig.java b/org/purpurmc/purpur/PurpurWorldConfig.java
index ae06918ebfa3bbd914ebdebb8107ec447643ef22..793d2fd30edcf4c21445eabdab8d6813e460e469 100644
--- a/org/purpurmc/purpur/PurpurWorldConfig.java
+++ b/org/purpurmc/purpur/PurpurWorldConfig.java
@@ -1139,12 +1139,20 @@ public class PurpurWorldConfig {
     public boolean allayControllable = true;
     public double allayMaxHealth = 20.0D;
     public double allayScale = 1.0D;
+    // Leaf start - Plazma - Add missing purpur configuration options
+    public boolean allayTakeDamageFromWater = false;
+    public boolean allayAlwaysDropExp = false;
+    // Leaf end - Plazma - Add missing purpur configuration options
     private void allaySettings() {
         allayRidable = getBoolean("mobs.allay.ridable", allayRidable);
         allayRidableInWater = getBoolean("mobs.allay.ridable-in-water", allayRidableInWater);
         allayControllable = getBoolean("mobs.allay.controllable", allayControllable);
         allayMaxHealth = getDouble("mobs.allay.attributes.max_health", allayMaxHealth);
         allayScale = Mth.clamp(getDouble("mobs.allay.attributes.scale", allayScale), 0.0625D, 16.0D);
+        // Leaf start - Plazma - Add missing purpur configuration options
+        allayTakeDamageFromWater = getBoolean("mobs.allay.take-damage-from-water", allayTakeDamageFromWater);
+        allayAlwaysDropExp = getBoolean("mobs.allay.always-drop-exp", allayAlwaysDropExp);
+        // Leaf end - Plazma - Add missing purpur configuration options
     }
 
     public boolean armadilloRidable = false;
@@ -1299,6 +1307,10 @@ public class PurpurWorldConfig {
     public double camelMovementSpeedMin = 0.09D;
     public double camelMovementSpeedMax = 0.09D;
     public int camelBreedingTicks = 6000;
+    // Leaf start - Plazma - Add missing purpur configuration options
+    public boolean camelTakeDamageFromWater = false;
+    public boolean camelAlwaysDropExp = false;
+    // Leaf end - Plazma - Add missing purpur configuration options
     private void camelSettings() {
         camelRidableInWater = getBoolean("mobs.camel.ridable-in-water", camelRidableInWater);
         camelMaxHealthMin = getDouble("mobs.camel.attributes.max_health.min", camelMaxHealthMin);
@@ -1308,6 +1320,10 @@ public class PurpurWorldConfig {
         camelMovementSpeedMin = getDouble("mobs.camel.attributes.movement_speed.min", camelMovementSpeedMin);
         camelMovementSpeedMax = getDouble("mobs.camel.attributes.movement_speed.max", camelMovementSpeedMax);
         camelBreedingTicks = getInt("mobs.camel.breeding-delay-ticks", camelBreedingTicks);
+        // Leaf start - Plazma - Add missing purpur configuration options
+        camelTakeDamageFromWater = getBoolean("mobs.camel.takes-damage-from-water", camelTakeDamageFromWater);
+        camelAlwaysDropExp = getBoolean("mobs.camel.always-drop-exp", camelAlwaysDropExp);
+        // Leaf end - Plazma - Add missing purpur configuration options
     }
 
     public boolean catRidable = false;
@@ -1454,12 +1470,20 @@ public class PurpurWorldConfig {
     public boolean creakingControllable = true;
     public double creakingMaxHealth = 1.0D;
     public double creakingScale = 1.0D;
+    // Leaf start - Plazma - Add missing purpur configuration options
+    public boolean creakingTakeDamageFromWater = false;
+    public boolean creakingAlwaysDropExp = false;
+    // Leaf end - Plazma - Add missing purpur configuration options
     private void creakingSettings() {
         creakingRidable = getBoolean("mobs.creaking.ridable", creakingRidable);
         creakingRidableInWater = getBoolean("mobs.creaking.ridable-in-water", creakingRidableInWater);
         creakingControllable = getBoolean("mobs.creaking.controllable", creakingControllable);
         creakingMaxHealth = getDouble("mobs.creaking.attributes.max_health", creakingMaxHealth);
         creakingScale = Mth.clamp(getDouble("mobs.creaking.attributes.scale", creakingScale), 0.0625D, 16.0D);
+        // Leaf start - Plazma - Add missing purpur configuration options
+        creakingTakeDamageFromWater = getBoolean("mobs.creaking.takes-damage-from-water", creakingTakeDamageFromWater);
+        creakingAlwaysDropExp = getBoolean("mobs.creaking.always-drop-exp", creakingAlwaysDropExp);
+        // Leaf end - Plazma - Add missing purpur configuration options
     }
 
     public boolean creeperRidable = false;
@@ -1766,12 +1790,22 @@ public class PurpurWorldConfig {
     public boolean frogControllable = true;
     public float frogRidableJumpHeight = 0.65F;
     public int frogBreedingTicks = 6000;
+    // Leaf start - Plazma - Add missing purpur configuration options
+    public double frogMaxHealth = 10.0D;
+    public boolean frogTakeDamageFromWater = false;
+    public boolean frogAlwaysDropExp = false;
+    // Leaf end - Plazma - Add missing purpur configuration options
     private void frogSettings() {
         frogRidable = getBoolean("mobs.frog.ridable", frogRidable);
         frogRidableInWater = getBoolean("mobs.frog.ridable-in-water", frogRidableInWater);
         frogControllable = getBoolean("mobs.frog.controllable", frogControllable);
         frogRidableJumpHeight = (float) getDouble("mobs.frog.ridable-jump-height", frogRidableJumpHeight);
         frogBreedingTicks = getInt("mobs.frog.breeding-delay-ticks", frogBreedingTicks);
+        // Leaf start - Plazma - Add missing purpur configuration options
+        frogMaxHealth = getDouble("mobs.frog.attributes.max_health", frogMaxHealth);
+        frogTakeDamageFromWater = getBoolean("mobs.frog.takes-damage-from-water", frogTakeDamageFromWater);
+        frogAlwaysDropExp = getBoolean("mobs.frog.always-drop-exp", frogAlwaysDropExp);
+        // Leaf end - Plazma - Add missing purpur configuration options
     }
 
     public boolean ghastRidable = false;
@@ -2801,6 +2835,10 @@ public class PurpurWorldConfig {
     public double snifferMaxHealth = 14.0D;
     public double snifferScale = 1.0D;
     public int snifferBreedingTicks = 6000;
+    // Leaf start - Plazma - Add missing purpur configuration options
+    public boolean snifferTakeDamageFromWater = false;
+    public boolean snifferAlwaysDropExp = false;
+    // Leaf end - Plazma - Add missing purpur configuration options
     private void snifferSettings() {
         snifferRidable = getBoolean("mobs.sniffer.ridable", snifferRidable);
         snifferRidableInWater = getBoolean("mobs.sniffer.ridable-in-water", snifferRidableInWater);
@@ -2808,6 +2846,10 @@ public class PurpurWorldConfig {
         snifferMaxHealth = getDouble("mobs.sniffer.attributes.max_health", snifferMaxHealth);
         snifferScale = Mth.clamp(getDouble("mobs.sniffer.attributes.scale", snifferScale), 0.0625D, 16.0D);
         snifferBreedingTicks = getInt("mobs.sniffer.breeding-delay-ticks", snifferBreedingTicks);
+        // Leaf start - Plazma - Add missing purpur configuration options
+        snifferTakeDamageFromWater = getBoolean("mobs.sniffer.takes-damage-from-water", snifferTakeDamageFromWater);
+        snifferAlwaysDropExp = getBoolean("mobs.sniffer.always-drop-exp", snifferAlwaysDropExp);
+        // Leaf end - Plazma - Add missing purpur configuration options
     }
 
     public boolean squidRidable = false;
@@ -2909,10 +2951,20 @@ public class PurpurWorldConfig {
     public boolean tadpoleRidable = false;
     public boolean tadpoleRidableInWater = true;
     public boolean tadpoleControllable = true;
+    // Leaf start - Plazma - Add missing purpur configuration options
+    public double tadpoleMaxHealth = 6.0D; // Leaf - Tadpole health should be 6
+    public boolean tadpoleTakeDamageFromWater = false;
+    public boolean tadpoleAlwaysDropExp = false;
+    // Leaf end - Plazma - Add missing purpur configuration options
     private void tadpoleSettings() {
         tadpoleRidable = getBoolean("mobs.tadpole.ridable", tadpoleRidable);
         tadpoleRidableInWater = getBoolean("mobs.tadpole.ridable-in-water", tadpoleRidableInWater);
         tadpoleControllable = getBoolean("mobs.tadpole.controllable", tadpoleControllable);
+        // Leaf start - Plazma - Add missing purpur configuration options
+        tadpoleMaxHealth = getDouble("mobs.tadpole.attributes.max_health", tadpoleMaxHealth);
+        tadpoleTakeDamageFromWater = getBoolean("mobs.tadpole.takes-damage-from-water", tadpoleTakeDamageFromWater);
+        tadpoleAlwaysDropExp = getBoolean("mobs.tadpole.always-drop-exp", tadpoleAlwaysDropExp);
+        // Leaf end - Plazma - Add missing purpur configuration options
     }
 
     public boolean traderLlamaRidable = false;
@@ -3141,10 +3193,20 @@ public class PurpurWorldConfig {
     public boolean wardenRidable = false;
     public boolean wardenRidableInWater = true;
     public boolean wardenControllable = true;
+    // Leaf start - Plazma - Add missing purpur configuration options
+    public double wardenMaxHealth = 500.0D;
+    public boolean wardenTakeDamageFromWater = false;
+    public boolean wardenAlwaysDropExp = false;
+    // Leaf end - Plazma - Add missing purpur configuration options
     private void wardenSettings() {
         wardenRidable = getBoolean("mobs.warden.ridable", wardenRidable);
         wardenRidableInWater = getBoolean("mobs.warden.ridable-in-water", wardenRidableInWater);
         wardenControllable = getBoolean("mobs.warden.controllable", wardenControllable);
+        // Leaf start - Plazma - Add missing purpur configuration options
+        wardenMaxHealth = getDouble("mobs.warden.attributes.max_health", wardenMaxHealth);
+        wardenTakeDamageFromWater = getBoolean("mobs.warden.takes-damage-from-water", wardenTakeDamageFromWater);
+        wardenAlwaysDropExp = getBoolean("mobs.warden.always-drop-exp", wardenAlwaysDropExp);
+        // Leaf end - Plazma - Add missing purpur configuration options
     }
 
     public boolean witchRidable = false;
