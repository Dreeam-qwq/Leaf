From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Thu, 20 Feb 2025 20:58:30 +0100
Subject: [PATCH] Inventory broadcastChanges optimization


diff --git a/net/minecraft/world/inventory/AbstractContainerMenu.java b/net/minecraft/world/inventory/AbstractContainerMenu.java
index 6033f629ac457472ad10f8e346732a596aea52d9..6311887ef7ded559743bb36e204ff5aa3c7aeb6a 100644
--- a/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -225,23 +225,35 @@ public abstract class AbstractContainerMenu {
     }
 
     public void broadcastChanges() {
+        // Avoid allocating supplier if no changes
+        boolean hasChanges = false;
+
         for (int i = 0; i < this.slots.size(); i++) {
             ItemStack item = this.slots.get(i).getItem();
-            Supplier<ItemStack> supplier = Suppliers.memoize(item::copy);
-            this.triggerSlotListeners(i, item, supplier);
-            this.synchronizeSlotToRemote(i, item, supplier);
+            ItemStack lastItem = this.lastSlots.get(i);
+
+            // Fast path - reference equality check first
+            if (item != lastItem && !ItemStack.matches(lastItem, item)) {
+                hasChanges = true;
+                Supplier<ItemStack> supplier = Suppliers.memoize(item::copy);
+                this.triggerSlotListeners(i, item, supplier);
+                this.synchronizeSlotToRemote(i, item, supplier);
+            }
         }
 
-        this.synchronizeCarriedToRemote();
+        // Only synchronize carried item if there were slot changes
+        if (hasChanges) {
+            this.synchronizeCarriedToRemote();
+        }
 
+        // Data slot synchronization
         for (int i = 0; i < this.dataSlots.size(); i++) {
             DataSlot dataSlot = this.dataSlots.get(i);
-            int i1 = dataSlot.get();
+            int value = dataSlot.get();
             if (dataSlot.checkAndClearUpdateFlag()) {
-                this.updateDataSlotListeners(i, i1);
+                this.updateDataSlotListeners(i, value);
             }
-
-            this.synchronizeDataSlotToRemote(i, i1);
+            this.synchronizeDataSlotToRemote(i, value);
         }
     }
 
@@ -281,8 +293,9 @@ public abstract class AbstractContainerMenu {
 
     private void synchronizeSlotToRemote(int slotIndex, ItemStack stack, Supplier<ItemStack> supplier) {
         if (!this.suppressRemoteUpdates) {
-            ItemStack itemStack = this.remoteSlots.get(slotIndex);
-            if (!ItemStack.matches(itemStack, stack)) {
+            ItemStack cachedRemoteStack = this.remoteSlots.get(slotIndex);
+            // Fast reference equality check first
+            if (stack != cachedRemoteStack && !ItemStack.matches(cachedRemoteStack, stack)) {
                 ItemStack itemStack1 = supplier.get();
                 this.remoteSlots.set(slotIndex, itemStack1);
                 if (this.synchronizer != null) {
diff --git a/net/minecraft/world/item/ItemStack.java b/net/minecraft/world/item/ItemStack.java
index fd7c1e800cbd4919a1a47f6c468c8776535bd028..0465330244ec506e0e0770d2f54e93267b530ab7 100644
--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -900,7 +900,15 @@ public final class ItemStack implements DataComponentHolder, net.caffeinemc.mods
     }
 
     public static boolean matches(ItemStack stack, ItemStack other) {
-        return stack == other || stack.getCount() == other.getCount() && isSameItemSameComponents(stack, other);
+        // Fast path - if same object reference
+        if (stack == other) {
+            return true;
+        }
+        // Check counts first since it's a cheaper comparison than component equality
+        if (stack.getCount() != other.getCount()) {
+            return false;
+        }
+        return isSameItemSameComponents(stack, other);
     }
 
     @Deprecated
