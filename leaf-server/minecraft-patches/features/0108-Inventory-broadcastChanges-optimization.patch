From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Thu, 20 Feb 2025 20:58:30 +0100
Subject: [PATCH] Inventory broadcastChanges optimization


diff --git a/net/minecraft/world/inventory/AbstractContainerMenu.java b/net/minecraft/world/inventory/AbstractContainerMenu.java
index 6033f629ac457472ad10f8e346732a596aea52d9..ca37b42fa810cddc289162a453fc8ab99ddc023c 100644
--- a/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -225,23 +225,35 @@ public abstract class AbstractContainerMenu {
     }
 
     public void broadcastChanges() {
+        // Avoid allocating supplier if no changes
+        boolean hasChanges = false;
+
         for (int i = 0; i < this.slots.size(); i++) {
             ItemStack item = this.slots.get(i).getItem();
-            Supplier<ItemStack> supplier = Suppliers.memoize(item::copy);
-            this.triggerSlotListeners(i, item, supplier);
-            this.synchronizeSlotToRemote(i, item, supplier);
+            ItemStack lastItem = this.lastSlots.get(i);
+
+            // Fast path - reference equality check first
+            if (item != lastItem && !ItemStack.matches(lastItem, item)) {
+                hasChanges = true;
+                Supplier<ItemStack> supplier = Suppliers.memoize(item::copy);
+                this.triggerSlotListeners(i, item, supplier);
+                this.synchronizeSlotToRemote(i, item, supplier);
+            }
         }
 
-        this.synchronizeCarriedToRemote();
+        // Only synchronize carried item if there were slot changes
+        if (hasChanges) {
+            this.synchronizeCarriedToRemote();
+        }
 
+        // Data slot synchronization
         for (int i = 0; i < this.dataSlots.size(); i++) {
             DataSlot dataSlot = this.dataSlots.get(i);
-            int i1 = dataSlot.get();
+            int value = dataSlot.get();
             if (dataSlot.checkAndClearUpdateFlag()) {
-                this.updateDataSlotListeners(i, i1);
+                this.updateDataSlotListeners(i, value);
             }
-
-            this.synchronizeDataSlotToRemote(i, i1);
+            this.synchronizeDataSlotToRemote(i, value);
         }
     }
 
