From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dreeam <61569423+Dreeam-qwq@users.noreply.github.com>
Date: Tue, 26 Nov 2024 17:15:38 -0500
Subject: [PATCH] Cache part of canHoldFluid result

Cache the result of part of canHoldFluid logic, since there are many state#is in canAnyHoldFluid method,
it uses map contains to do iteration to check whether a block has a specific block tag key,
which the contains iteration call is very expensive if called everytime

In the test, it can improve ~30% performance in ~1577000 times of canHoldAnyFluid calls (~159ms -> ~111ms)

diff --git a/net/minecraft/world/level/block/state/BlockBehaviour.java b/net/minecraft/world/level/block/state/BlockBehaviour.java
index 7f46f33fa565fa1a3aedce5524f19be8ba420352..d35211b0cae66b1a40e89539507e55973313f46f 100644
--- a/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -454,6 +454,8 @@ public abstract class BlockBehaviour implements FeatureElement {
         private VoxelShape[] occlusionShapesByFace;
         private boolean propagatesSkylightDown;
         private int lightBlock;
+        private boolean canHoldAnyFluidInternal; // Leaf - Cache part of canHoldFluid result
+        private boolean canHoldAnyFluidInternalInit; // Leaf - Cache part of canHoldFluid result
 
         // Paper start - rewrite chunk system
         private boolean isConditionallyFullOpaque;
@@ -603,6 +605,8 @@ public abstract class BlockBehaviour implements FeatureElement {
 
             this.propagatesSkylightDown = this.owner.propagatesSkylightDown(this.asState());
             this.lightBlock = this.owner.getLightBlock(this.asState());
+            this.canHoldAnyFluidInternal = false; // Leaf - Cache part of canHoldFluid result
+            this.canHoldAnyFluidInternalInit = false; // Leaf - Cache part of canHoldFluid result
             // Paper start - rewrite chunk system
             this.isConditionallyFullOpaque = this.canOcclude & this.useShapeForLightOcclusion;
             // Paper end - rewrite chunk system
@@ -654,6 +658,18 @@ public abstract class BlockBehaviour implements FeatureElement {
             return block != Blocks.COBWEB && block != Blocks.BAMBOO_SAPLING && this.isSolid();
         }
 
+        // Leaf start - Cache part of canHoldFluid result
+        public boolean canHoldAnyFluidInternal() {
+            // Lazy load cache
+            if (!canHoldAnyFluidInternalInit) {
+                canHoldAnyFluidInternal = net.minecraft.world.level.material.FlowingFluid.canHoldAnyFluid(this.asState());
+                canHoldAnyFluidInternalInit = true;
+            }
+
+            return canHoldAnyFluidInternal;
+        }
+        // Leaf end - Cache part of canHoldFluid result
+
         @Deprecated
         public boolean isSolid() {
             return this.legacySolid;
diff --git a/net/minecraft/world/level/material/FlowingFluid.java b/net/minecraft/world/level/material/FlowingFluid.java
index 738defb8cbd9c63dc85c479911ebe2f795d0a815..4c2c2efd5380ff1fa5ad7553b51babae20f516ae 100644
--- a/net/minecraft/world/level/material/FlowingFluid.java
+++ b/net/minecraft/world/level/material/FlowingFluid.java
@@ -466,7 +466,7 @@ public abstract class FlowingFluid extends Fluid {
     }
 
     private static boolean canHoldFluid(BlockGetter level, BlockPos pos, BlockState state, Fluid fluid) {
-        return canHoldAnyFluid(state) && canHoldSpecificFluid(level, pos, state, fluid);
+        return /*canHoldAnyFluid(state)*/ state.canHoldAnyFluidInternal() && canHoldSpecificFluid(level, pos, state, fluid); // Leaf - Cache part of canHoldFluid result
     }
 
     private static boolean canHoldSpecificFluid(BlockGetter level, BlockPos pos, BlockState state, Fluid fluid) {
