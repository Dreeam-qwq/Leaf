From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Fri, 14 Feb 2025 14:58:59 +0100
Subject: [PATCH] Alternative Brain Behaviour


diff --git a/net/minecraft/world/entity/ai/Brain.java b/net/minecraft/world/entity/ai/Brain.java
index e27284f9897923f67985e3d60c3438bd00cc4a51..7a0a8bd6fb07f86834db14c5d2c8a86659136918 100644
--- a/net/minecraft/world/entity/ai/Brain.java
+++ b/net/minecraft/world/entity/ai/Brain.java
@@ -16,11 +16,8 @@ import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.MapLike;
 import com.mojang.serialization.RecordBuilder;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
+
+import java.util.*;
 import java.util.Map.Entry;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
@@ -268,22 +265,46 @@ public class Brain<E extends LivingEntity> {
         return this.activeActivities;
     }
 
+    private ObjectArrayList<BehaviorControl<? super E>> runningBehaviorsCache;
+    private long lastRunningBehaviorCheck = -1;
+    private static final int CACHE_UPDATE_INTERVAL = 5;
+
     @Deprecated
     @VisibleForDebug
     public List<BehaviorControl<? super E>> getRunningBehaviors() {
-        List<BehaviorControl<? super E>> list = new ObjectArrayList<>();
+        long currentTick = getCurrentTick();
 
-        for (Map<Activity, Set<BehaviorControl<? super E>>> map : this.availableBehaviorsByPriority.values()) {
-            for (Set<BehaviorControl<? super E>> set : map.values()) {
-                for (BehaviorControl<? super E> behaviorControl : set) {
-                    if (behaviorControl.getStatus() == Behavior.Status.RUNNING) {
-                        list.add(behaviorControl);
+        // Use cached result if within update interval
+        if (runningBehaviorsCache != null && (currentTick - lastRunningBehaviorCheck) < CACHE_UPDATE_INTERVAL) {
+            return runningBehaviorsCache;
+        }
+        // Initialize or reuse cache list
+        if (runningBehaviorsCache == null) {
+            runningBehaviorsCache = new ObjectArrayList<>(32);
+        } else {
+            runningBehaviorsCache.clear();
+        }
+        for (Map<Activity, Set<BehaviorControl<? super E>>> activityMap : availableBehaviorsByPriority.values()) {
+            for (Set<BehaviorControl<? super E>> behaviors : activityMap.values()) {
+                if (behaviors.isEmpty()) {
+                    continue;
+                }
+                for (BehaviorControl<? super E> behavior : behaviors) {
+                    if (behavior.getStatus() == Behavior.Status.RUNNING) {
+                        runningBehaviorsCache.add(behavior);
                     }
                 }
             }
         }
 
-        return list;
+        lastRunningBehaviorCheck = currentTick;
+        return runningBehaviorsCache;
+    }
+
+    // Helper method to get current tick
+    private long getCurrentTick() {
+        // This should be implemented to return the current game tick
+        return System.nanoTime() / 50_000_000; // Approximate tick time of 50ms
     }
 
     public void useDefaultActivity() {
