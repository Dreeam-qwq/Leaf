From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Tue, 11 Feb 2025 22:50:28 +0100
Subject: [PATCH] Lazily optimize isChunkNearPlayer


diff --git a/net/minecraft/server/level/ServerChunkCache.java b/net/minecraft/server/level/ServerChunkCache.java
index aa229df5e8ed8b6cf8f424aae6183f625fc98de2..b046103ea0634ecaf2facf20f447a5db0fa0115e 100644
--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -152,6 +152,7 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
     // Paper start - chunk tick iteration optimisations
     private final net.minecraft.world.level.levelgen.BitRandomSource shuffleRandom = org.dreeam.leaf.config.modules.opt.FastRNG.enabled ? new org.dreeam.leaf.util.math.random.FasterRandomSource(0L) : new ca.spottedleaf.moonrise.common.util.SimpleThreadUnsafeRandom(0L); // Leaf - Faster random generator
     private boolean isChunkNearPlayer(final ChunkMap chunkMap, final ChunkPos chunkPos, final LevelChunk levelChunk) {
+        // Early exit if there's no nearby players data
         final ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkData chunkData = ((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemChunkHolder)((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemLevelChunk)levelChunk).moonrise$getChunkAndHolder().holder())
             .moonrise$getRealChunkHolder().holderData;
         final ca.spottedleaf.moonrise.common.misc.NearbyPlayers.TrackedChunk nearbyPlayers = chunkData.nearbyPlayers;
@@ -159,18 +160,36 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
             return false;
         }
 
+        // Get players in spawn range efficiently
         final ca.spottedleaf.moonrise.common.list.ReferenceList<ServerPlayer> players = nearbyPlayers.getPlayers(ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.SPAWN_RANGE);
 
+        // Early exit if no players
         if (players == null) {
             return false;
         }
 
+        // Use raw array for fastest iteration
         final ServerPlayer[] raw = players.getRawDataUnchecked();
         final int len = players.size();
+        // Precompute chunk center coordinates to avoid repeated calculations
+        final double chunkCenterX = (chunkPos.x << 4) + 8.0;
+        final double chunkCenterZ = (chunkPos.z << 4) + 8.0;
 
-        java.util.Objects.checkFromIndexSize(0, len, raw.length);
+        // Inline distance check to avoid method call overhead
         for (int i = 0; i < len; ++i) {
-            if (chunkMap.playerIsCloseEnoughForSpawning(raw[i], chunkPos, 16384.0D)) { // Spigot (reducedRange = false)
+            final ServerPlayer player = raw[i];
+
+            // Quick null and spectator check
+            if (player == null || player.isSpectator()) {
+                continue;
+            }
+
+            // Squared distance check is faster than sqrt
+            final double dx = player.getX() - chunkCenterX;
+            final double dz = player.getZ() - chunkCenterZ;
+
+            // Use 16384.0 (128^2) as the spawn range squared
+            if (dx * dx + dz * dz < 16384.0) {
                 return true;
             }
         }
