From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Fri, 14 Feb 2025 20:08:14 +0100
Subject: [PATCH] Improve checkDespawn


diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index dd1827931e7a2f771444867ad556444de5001060..83addbc1a0d4dbc69586b69b723f66ca41dbcfeb 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -735,6 +735,8 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         return this.structureManager;
     }
 
+    public Player[] eligibleDespawnCheckingPlayerCache = new Player[0]; //Leaf - cache elgible players for despawn checks
+
     public void tick(BooleanSupplier hasTimeLeft) {
         this.handlingTick = true;
         TickRateManager tickRateManager = this.tickRateManager();
@@ -802,6 +804,18 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             }
 
             io.papermc.paper.entity.activation.ActivationRange.activateEntities(this); // Paper - EAR
+            // Leaf start - cache elgible players for despawn checks
+
+            List<ServerPlayer> playerz = new ArrayList<>(players().size());
+            for(int i=0;i<players().size();i++){
+                ServerPlayer player = players().get(i);
+                if(net.minecraft.world.entity.EntitySelector.PLAYER_AFFECTS_SPAWNING.test(player)){
+                    playerz.add(player);
+                }
+            }
+            eligibleDespawnCheckingPlayerCache = playerz.toArray(new Player[0]);
+
+            // Leaf end - cache elgible players for despawn checks
             this.entityTickList
                 .forEach(
                     entity -> {
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 01c30802a1d0127f2ed36efa7511c2ac6b2b5cfa..9a524a1c601f78fdfa15f8239191fd7336668c93 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1569,6 +1569,13 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
         this.containerMenu.broadcastChanges();
     }
 
+    // Leaf start - Improve player isAlive checks
+    @Override
+    public boolean isAlive(){
+        return !this.isRemoved() && this.entityData.get(DATA_HEALTH_ID) > 0.0f && !this.dead;
+    }
+    // Leaf end - Improve player isAlive checks
+
     // CraftBukkit start - moved bed result checks from below into separate method
     private Either<Player.BedSleepingProblem, Unit> getBedResult(BlockPos at, Direction direction) {
         if (this.isSleeping() || !this.isAlive()) {
diff --git a/net/minecraft/world/entity/Mob.java b/net/minecraft/world/entity/Mob.java
index b541236c39e3f36bcc619fffe83e32987df20adf..bb182005b02124f68b87b0557032307fafd8f2e7 100644
--- a/net/minecraft/world/entity/Mob.java
+++ b/net/minecraft/world/entity/Mob.java
@@ -854,7 +854,24 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         if (this.level().getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
             this.discard(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
         } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
-            Entity nearestPlayer = this.level().findNearbyPlayer(this, -1.0, EntitySelector.PLAYER_AFFECTS_SPAWNING); // Paper - Affects Spawning API
+            // Leaf start - cache elgible players for despawn checks
+            Entity nearestPlayer=null;
+
+            if(this.level() instanceof ServerLevel serverLevel){
+                double minDist = Double.MAX_VALUE;
+                for (int i=0;i<serverLevel.eligibleDespawnCheckingPlayerCache.length;i++) {
+                    Player player1 = serverLevel.eligibleDespawnCheckingPlayerCache[i];
+                    double d1 = player1.distanceToSqr(this);
+                    if (d1 <= minDist) {
+                        minDist = d1;
+                        nearestPlayer = player1;
+                    }
+                }
+            }else{
+                nearestPlayer = this.level().findNearbyPlayer(this, -1.0, EntitySelector.PLAYER_AFFECTS_SPAWNING); // Paper - Affects Spawning API
+            }
+            // Leaf start - cache elgible players for despawn checks
+
             if (nearestPlayer != null) {
                 // Paper start - Configurable despawn distances
                 final io.papermc.paper.configuration.WorldConfiguration.Entities.Spawning.DespawnRangePair despawnRangePair = this.level().paperConfig().entities.spawning.despawnRanges.get(this.getType().getCategory());
