From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Fri, 21 Feb 2025 12:38:08 +0100
Subject: [PATCH] Pre-size ClientboundLightUpdatePacketData


diff --git a/net/minecraft/network/protocol/game/ClientboundLightUpdatePacketData.java b/net/minecraft/network/protocol/game/ClientboundLightUpdatePacketData.java
index a0b54f3a3d11e0f0f1cb806406a870ba36da8f07..da331229c15eee4b20a00f61a21d49d5c3dafac6 100644
--- a/net/minecraft/network/protocol/game/ClientboundLightUpdatePacketData.java
+++ b/net/minecraft/network/protocol/game/ClientboundLightUpdatePacketData.java
@@ -24,14 +24,19 @@ public class ClientboundLightUpdatePacketData {
     private final List<byte[]> blockUpdates;
 
     public ClientboundLightUpdatePacketData(ChunkPos chunkPos, LevelLightEngine lightEngine, @Nullable BitSet skyLight, @Nullable BitSet blockLight) {
-        this.skyYMask = new BitSet();
-        this.blockYMask = new BitSet();
-        this.emptySkyYMask = new BitSet();
-        this.emptyBlockYMask = new BitSet();
-        this.skyUpdates = Lists.newArrayList();
-        this.blockUpdates = Lists.newArrayList();
-
-        for (int i = 0; i < lightEngine.getLightSectionCount(); i++) {
+        int sectionCount = lightEngine.getLightSectionCount();
+
+        // Pre-size BitSets to avoid dynamic expansion
+        this.skyYMask = new BitSet(sectionCount);
+        this.blockYMask = new BitSet(sectionCount);
+        this.emptySkyYMask = new BitSet(sectionCount);
+        this.emptyBlockYMask = new BitSet(sectionCount);
+
+        // Pre-allocate ArrayList capacity
+        this.skyUpdates = Lists.newArrayListWithCapacity(sectionCount);
+        this.blockUpdates = Lists.newArrayListWithCapacity(sectionCount);
+
+        for (int i = 0; i < sectionCount; i++) {
             if (skyLight == null || skyLight.get(i)) {
                 this.prepareSectionData(chunkPos, lightEngine, LightLayer.SKY, i, this.skyYMask, this.emptySkyYMask, this.skyUpdates);
             }
@@ -63,15 +68,25 @@ public class ClientboundLightUpdatePacketData {
     private void prepareSectionData(
         ChunkPos chunkPos, LevelLightEngine levelLightEngine, LightLayer lightLayer, int index, BitSet skyLight, BitSet blockLight, List<byte[]> updates
     ) {
-        DataLayer dataLayerData = levelLightEngine.getLayerListener(lightLayer)
-            .getDataLayerData(SectionPos.of(chunkPos, levelLightEngine.getMinLightSection() + index));
-        if (dataLayerData != null) {
-            if (dataLayerData.isEmpty()) {
-                blockLight.set(index);
-            } else {
-                skyLight.set(index);
-                updates.add(dataLayerData.copy().getData());
-            }
+        // Cache the section position calculation
+        int sectionY = levelLightEngine.getMinLightSection() + index;
+        SectionPos sectionPos = SectionPos.of(chunkPos.x, sectionY, chunkPos.z);
+
+        // Get data layer without chaining method calls
+        var layerListener = levelLightEngine.getLayerListener(lightLayer);
+        DataLayer dataLayerData = layerListener.getDataLayerData(sectionPos);
+        if (dataLayerData == null) {return;}
+
+        // Avoid the isEmpty() check which might iterate through the array
+        if (dataLayerData.isEmpty()) {
+            blockLight.set(index);
+        } else {
+            skyLight.set(index);
+
+            // Direct access to the data to avoid copy if possible
+            byte[] data = dataLayerData.getData();
+            // Only perform a copy if absolutely necessary
+            updates.add(data.clone());
         }
     }
 
