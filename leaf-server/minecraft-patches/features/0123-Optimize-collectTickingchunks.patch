From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Tue, 11 Feb 2025 20:13:56 +0100
Subject: [PATCH] Optimize collectTickingchunks


diff --git a/net/minecraft/server/level/ServerChunkCache.java b/net/minecraft/server/level/ServerChunkCache.java
index dd956431bb882daa70267685f2283d0c358336be..aa229df5e8ed8b6cf8f424aae6183f625fc98de2 100644
--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -570,20 +570,31 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
         final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.server.level.ServerChunkCache.ChunkAndHolder> tickingChunks =
             ((ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickServerLevel)this.level).moonrise$getPlayerTickingChunks();
 
-        final ServerChunkCache.ChunkAndHolder[] raw = tickingChunks.getRawDataUnchecked();
+        // Avoid repeated method calls by getting size once
         final int size = tickingChunks.size();
 
+        if (size == 0) {
+            return;
+        }
+
+        // Pre-size output list to avoid resizing
+        if (output instanceof ArrayList chunks) {
+            chunks.ensureCapacity(Math.min(size, 16384)); // TODO: this could be configurable to smoothen out the array expansion
+        }
+
+        // Get raw array access
+        final ServerChunkCache.ChunkAndHolder[] raw = tickingChunks.getRawDataUnchecked();
+        // Cache frequently accessed objects
         final ChunkMap chunkMap = this.chunkMap;
 
         for (int i = 0; i < size; ++i) {
             final ServerChunkCache.ChunkAndHolder chunkAndHolder = raw[i];
             final LevelChunk levelChunk = chunkAndHolder.chunk();
 
-            if (!this.isChunkNearPlayer(chunkMap, levelChunk.getPos(), levelChunk)) {
-                continue;
+            // Check if chunk is near a player using cached computation
+            if (this.isChunkNearPlayer(chunkMap, levelChunk.getPos(), levelChunk)) {
+                output.add(levelChunk);
             }
-
-            output.add(levelChunk);
         }
         // Paper end - chunk tick iteration optimisation
     }
