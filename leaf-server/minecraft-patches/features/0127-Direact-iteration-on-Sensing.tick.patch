From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Taiyou06 <kaandindar21@gmail.com>
Date: Sat, 22 Feb 2025 14:07:25 +0100
Subject: [PATCH] Direact iteration on Sensing.tick


diff --git a/net/minecraft/world/entity/ai/sensing/Sensing.java b/net/minecraft/world/entity/ai/sensing/Sensing.java
index cc25f5838aec5ed9fca2fb8b0322fafad9397a46..bb6a84fbe52fea80b977cf846467d05d0efbd2d5 100644
--- a/net/minecraft/world/entity/ai/sensing/Sensing.java
+++ b/net/minecraft/world/entity/ai/sensing/Sensing.java
@@ -34,27 +34,29 @@ public class Sensing {
 
     public void tick() {
         if (this.expiring == null) { // Gale - Petal - reduce line of sight updates
-        this.seen.clear();
-            // Gale start - Petal - reduce line of sight updates
+            this.seen.clear();
         } else {
+            // Gale start - Petal - reduce line of sight updates
             var expiringNow = this.expiring[this.nextToExpireIndex];
 
-            expiringNow.forEach(this.seen::remove);
-            expiringNow.clear();
-
-            this.currentCacheAddIndex++;
-
-            if (this.currentCacheAddIndex == this.expiring.length) {
-                this.currentCacheAddIndex = 0;
+            // Leaf - Skip processing if there are no entities to expire
+            int size = expiringNow.size();
+            if (size > 0) {
+                // Leaf - optimize forEach with direct iteration to avoid lambda overhead
+                for (int i = 0; i < size; i++) {
+                    this.seen.remove(expiringNow.getInt(i));
+                }
             }
 
-            this.nextToExpireIndex++;
+            expiringNow.clear();
 
-            if (this.nextToExpireIndex == this.expiring.length) {
-                this.nextToExpireIndex = 0;
-            }
+            // Leaf - replace conditional with modulo for better performance
+            this.currentCacheAddIndex = (this.currentCacheAddIndex + 1) % this.expiring.length;
+
+            // Leaf - replace conditional with modulo for better performance
+            this.nextToExpireIndex = (this.nextToExpireIndex + 1) % this.expiring.length;
+            // Gale end - Petal - reduce line of sight updates
         }
-        // Gale end - Petal - reduce line of sight updates
     }
 
     public boolean hasLineOfSight(Entity entity) {
