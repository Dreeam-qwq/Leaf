From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dreeam <61569423+Dreeam-qwq@users.noreply.github.com>
Date: Sat, 19 Oct 2024 03:28:33 -0400
Subject: [PATCH] Optimize nearby alive players for spawning

Use SpottedLeaf's nearby players system to avoid iterating over all online players
and reduce the cost on predicate test

diff --git a/net/minecraft/world/entity/EntitySelector.java b/net/minecraft/world/entity/EntitySelector.java
index 002ec5f1ec14411ca48ae04b3379db0c70f81942..d2ca99f8b5ad46c59b663cd56f3ee2bd66185381 100644
--- a/net/minecraft/world/entity/EntitySelector.java
+++ b/net/minecraft/world/entity/EntitySelector.java
@@ -32,7 +32,7 @@ public final class EntitySelector {
 
     // Paper start - Affects Spawning API
     public static final Predicate<Entity> PLAYER_AFFECTS_SPAWNING = (entity) -> {
-        return !entity.isSpectator() && entity.isAlive() && entity instanceof Player player && player.affectsSpawning;
+        return !entity.isSpectator() && entity.isAlive() && entity instanceof Player player && player.affectsSpawning; // Leaf - Optimize nearby alive players for spawning - diff on change
     };
     // Paper end - Affects Spawning API
 
diff --git a/net/minecraft/world/entity/monster/Zombie.java b/net/minecraft/world/entity/monster/Zombie.java
index 660dff3fe7aacfe964dae22bb38b72aa36f0b8e3..4f7a5d6391f045693a6208ff5cd99e5e0b58b194 100644
--- a/net/minecraft/world/entity/monster/Zombie.java
+++ b/net/minecraft/world/entity/monster/Zombie.java
@@ -406,7 +406,7 @@ public class Zombie extends Monster {
                     if (SpawnPlacements.isSpawnPositionOk(type, level, blockPos)
                         && SpawnPlacements.checkSpawnRules(type, level, EntitySpawnReason.REINFORCEMENT, blockPos, level.random)) {
                         zombie.setPos(i1, i2, i3);
-                        if (!level.hasNearbyAlivePlayerThatAffectsSpawning(i1, i2, i3, 7.0) // Paper - affects spawning api
+                        if (!level.hasNearbyAlivePlayerThatAffectsSpawningForZombie(i1, i2, i3, 7.0) // Paper - affects spawning api // Leaf - Optimize nearby alive players for spawning
                             && level.isUnobstructed(zombie)
                             && level.noCollision(zombie)
                             && (zombie.canSpawnInLiquids() || !level.containsAnyLiquid(zombie.getBoundingBox()))) {
diff --git a/net/minecraft/world/level/BaseSpawner.java b/net/minecraft/world/level/BaseSpawner.java
index 8de482367f3d9d91048b7c85cbaefcda9f9fbcdc..8c6f8cb08b247dcf497822ae991aa3afbcb784f1 100644
--- a/net/minecraft/world/level/BaseSpawner.java
+++ b/net/minecraft/world/level/BaseSpawner.java
@@ -53,7 +53,7 @@ public abstract class BaseSpawner {
 
     public boolean isNearPlayer(Level level, BlockPos pos) {
         if (level.purpurConfig.spawnerDeactivateByRedstone && level.hasNeighborSignal(pos)) return false; // Purpur - Redstone deactivates spawners
-        return level.hasNearbyAlivePlayerThatAffectsSpawning(pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5, this.requiredPlayerRange); // Paper - Affects Spawning API
+        return level.hasNearbyAlivePlayerThatAffectsSpawningForSpawner(pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5, this.requiredPlayerRange); // Paper - Affects Spawning API // Leaf - Optimize nearby alive players for spawning
     }
 
     public void clientTick(Level level, BlockPos pos) {
diff --git a/net/minecraft/world/level/EntityGetter.java b/net/minecraft/world/level/EntityGetter.java
index f41e41d01aa42f3578ffb3bc888416e74d17cd1d..9d3b5ea3f0cd8d662ffe99e70bf0af22f6ba0512 100644
--- a/net/minecraft/world/level/EntityGetter.java
+++ b/net/minecraft/world/level/EntityGetter.java
@@ -112,6 +112,89 @@ public interface EntityGetter extends ca.spottedleaf.moonrise.patches.chunk_syst
         // Paper end - optimise collisions
     }
 
+    // Leaf start - Optimize nearby alive players for spawning
+    default boolean hasNearbyAlivePlayerThatAffectsSpawningForSpawner(double x, double y, double z, double range) {
+        if (range > 33) {
+            return hasNearbyAlivePlayerThatAffectsSpawningForLargerRangeSpawner(x, y, z, range);
+        }
+
+        final net.minecraft.core.BlockPos.MutableBlockPos mutablePos = new net.minecraft.core.BlockPos.MutableBlockPos();
+
+        mutablePos.set(x, y, z);
+
+        final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.server.level.ServerPlayer> players = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel) this).moonrise$getNearbyPlayers().getPlayers(
+            mutablePos, ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.GENERAL // NearbyPlayers.GENERAL_AREA_VIEW_DISTANCE: 33
+        );
+
+        if (players == null) {
+            return false;
+        }
+
+        final net.minecraft.server.level.ServerPlayer[] raw = players.getRawDataUnchecked();
+        final int len = players.size();
+
+        java.util.Objects.checkFromIndexSize(0, len, raw.length);
+
+        for (int i = 0; i < len; ++i) {
+            final net.minecraft.server.level.ServerPlayer player = raw[i];
+            final double distanceSqr = player.distanceToSqr(x, y, z);
+
+            if (range < 0.0D || distanceSqr < range * range) {
+                if (!player.isSpectator() && player.isAlive() && player.affectsSpawning) { // combines NO_SPECTATORS and LIVING_ENTITY_STILL_ALIVE with an "affects spawning" check
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    default boolean hasNearbyAlivePlayerThatAffectsSpawningForLargerRangeSpawner(double x, double y, double z, double range) {
+        for (Player player : this.players()) {
+            double distanceSqr = player.distanceToSqr(x, y, z);
+            if (range < 0.0D || distanceSqr < range * range) {
+                if (!player.isSpectator() && player.isAlive() && player.affectsSpawning) { // combines NO_SPECTATORS and LIVING_ENTITY_STILL_ALIVE with an "affects spawning" check
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    default boolean hasNearbyAlivePlayerThatAffectsSpawningForZombie(int x, int y, int z, double range) {
+        final net.minecraft.core.BlockPos.MutableBlockPos mutablePos = new net.minecraft.core.BlockPos.MutableBlockPos();
+
+        mutablePos.set(x, y, z);
+
+        final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.server.level.ServerPlayer> players = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel) this).moonrise$getNearbyPlayers().getPlayers(
+            mutablePos, ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.SPAWN_RANGE // NearbyPlayers.PLAYER_SPAWN_TRACK_RANGE: 8
+        );
+
+        if (players == null) {
+            return false;
+        }
+
+        final net.minecraft.server.level.ServerPlayer[] raw = players.getRawDataUnchecked();
+        final int len = players.size();
+
+        java.util.Objects.checkFromIndexSize(0, len, raw.length);
+
+        for (int i = 0; i < len; ++i) {
+            final net.minecraft.server.level.ServerPlayer player = raw[i];
+            final double distanceSqr = player.distanceToSqr(x, y, z);
+
+            if (range < 0.0D || distanceSqr < range * range) {
+                if (!player.isSpectator() && player.isAlive() && player.affectsSpawning) { // combines NO_SPECTATORS and LIVING_ENTITY_STILL_ALIVE with an "affects spawning" check
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+    // Leaf end - Optimize nearby alive players for spawning
+
     // Paper start - Affects Spawning API
     default @Nullable Player findNearbyPlayer(Entity entity, double maxDistance, @Nullable Predicate<Entity> predicate) {
         return this.getNearestPlayer(entity.getX(), entity.getY(), entity.getZ(), maxDistance, predicate);
