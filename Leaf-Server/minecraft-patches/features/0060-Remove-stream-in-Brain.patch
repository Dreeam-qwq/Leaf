From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: HaHaWTH <102713261+HaHaWTH@users.noreply.github.com>
Date: Sat, 26 Oct 2024 00:06:04 +0800
Subject: [PATCH] Remove stream in Brain


diff --git a/net/minecraft/world/entity/ai/Brain.java b/net/minecraft/world/entity/ai/Brain.java
index 450396468b23fd90cb8036dbbdd0927051f907af..402279ff78f9e9eb74c63d35ec1968d239228d70 100644
--- a/net/minecraft/world/entity/ai/Brain.java
+++ b/net/minecraft/world/entity/ai/Brain.java
@@ -70,13 +70,22 @@ public class Brain<E extends LivingEntity> {
             (new MapCodec<Brain<E>>() {
                     @Override
                     public <T> Stream<T> keys(DynamicOps<T> ops) {
-                        return memoryTypes.stream()
-                            .flatMap(
-                                memoryModuleType -> memoryModuleType.getCodec()
-                                    .map(codec -> BuiltInRegistries.MEMORY_MODULE_TYPE.getKey((MemoryModuleType<?>)memoryModuleType))
-                                    .stream()
-                            )
-                            .map(resourceLocation -> ops.createString(resourceLocation.toString()));
+                        // Leaf start - Remove stream in Brain
+                        List<T> results = new java.util.ArrayList<>();
+
+                        for (MemoryModuleType<?> memoryModuleType : memoryTypes) {
+                            final Optional<?> codec = memoryModuleType.getCodec();
+
+                            if (codec.isPresent()) {
+                                final net.minecraft.resources.ResourceLocation resourceLocation = BuiltInRegistries.MEMORY_MODULE_TYPE.getKey(memoryModuleType);
+                                final T opsResult = ops.createString(resourceLocation.toString());
+
+                                results.add(opsResult);
+                            }
+                        }
+
+                        return results.stream();
+                        // Leaf end - Remove stream in Brain
                     }
 
                     @Override
@@ -111,7 +120,7 @@ public class Brain<E extends LivingEntity> {
 
                     @Override
                     public <T> RecordBuilder<T> encode(Brain<E> input, DynamicOps<T> ops, RecordBuilder<T> prefix) {
-                        input.memories().forEach(memoryValue -> memoryValue.serialize(ops, prefix));
+                        input.serializeMemories(ops, prefix); // Leaf - Remove stream in Brain
                         return prefix;
                     }
                 })
@@ -153,8 +162,28 @@ public class Brain<E extends LivingEntity> {
     }
 
     Stream<Brain.MemoryValue<?>> memories() {
-        return this.memories.entrySet().stream().map(memory -> Brain.MemoryValue.createUnchecked(memory.getKey(), memory.getValue()));
+        // Leaf start - Remove stream in Brain
+        return memoriesList().stream();
+    }
+
+    List<Brain.MemoryValue<?>> memoriesList() {
+        List<Brain.MemoryValue<?>> result = new java.util.ArrayList<>();
+
+        for (Entry<MemoryModuleType<?>, Optional<? extends ExpirableValue<?>>> memory : this.memories.entrySet()) {
+            result.add(Brain.MemoryValue.createUnchecked(memory.getKey(), memory.getValue()));
+        }
+
+        return result;
+    }
+
+    <T> void serializeMemories(DynamicOps<T> dynamicOps, RecordBuilder<T> recordBuilder) {
+        for (Entry<MemoryModuleType<?>, Optional<? extends ExpirableValue<?>>> memory : this.memories.entrySet()) {
+            final Brain.MemoryValue<?> result = Brain.MemoryValue.createUnchecked(memory.getKey(), memory.getValue());
+
+            result.serialize(dynamicOps, recordBuilder);
+        }
     }
+    // Leaf end - Remove stream in Brain
 
     public boolean hasMemoryValue(MemoryModuleType<?> type) {
         return this.checkMemory(type, MemoryStatus.VALUE_PRESENT);
